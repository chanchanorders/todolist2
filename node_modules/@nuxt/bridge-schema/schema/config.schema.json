{
  "id": "#",
  "properties": {
    "vue": {
      "id": "#vue",
      "properties": {
        "config": {
          "title": "Properties that will be set directly on `Vue.config` for vue@2.",
          "description": "",
          "tags": [
            "@see [vue@2 Documentation](https://v2.vuejs.org/v2/api/#Global-Config)"
          ],
          "tsType": "typeof import('vue/types/vue').VueConfiguration",
          "markdownType": "VueTypesVueVueConfiguration",
          "id": "#vue/config",
          "properties": {
            "silent": {
              "id": "#vue/config/silent",
              "default": true,
              "type": "boolean"
            },
            "performance": {
              "id": "#vue/config/performance",
              "default": {},
              "type": "any"
            }
          },
          "default": {
            "silent": true,
            "performance": {}
          },
          "type": "object"
        }
      },
      "default": {
        "config": {
          "silent": true,
          "performance": {}
        }
      },
      "type": "object"
    },
    "app": {
      "id": "#app",
      "properties": {
        "baseURL": {
          "title": "The base path of your Nuxt application.",
          "description": "This can be set at runtime by setting the NUXT_APP_BASE_URL environment variable.",
          "tags": [
            "@example\n```bash\nNUXT_APP_BASE_URL=/prefix/ node .output/server/index.mjs\n```"
          ],
          "id": "#app/baseURL",
          "default": "/",
          "type": "string"
        },
        "buildAssetsDir": {
          "title": "The folder name for the built site assets, relative to `baseURL` (or `cdnURL` if set). This is set at build time and should not be customized at runtime.",
          "description": "",
          "tags": [],
          "id": "#app/buildAssetsDir",
          "default": "/_nuxt/",
          "type": "string"
        },
        "assetsPath": {
          "title": "The folder name for the built site assets, relative to `baseURL` (or `cdnURL` if set).",
          "description": "",
          "tags": [
            "@deprecated - use `buildAssetsDir` instead"
          ],
          "id": "#app/assetsPath",
          "default": {},
          "type": "any"
        },
        "head": {
          "title": "Set default configuration for `<head>` on every page.",
          "description": "",
          "tags": [
            "@example\n```js\napp: {\n  head: {\n    meta: [\n      // <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' }\n    ],\n    script: [\n      // <script src=\"https://myawesome-lib.js\"></script>\n      { src: 'https://awesome-lib.js' }\n    ],\n    link: [\n      // <link rel=\"stylesheet\" href=\"https://myawesome-lib.css\">\n      { rel: 'stylesheet', href: 'https://awesome-lib.css' }\n    ],\n    // please note that this is an area that is likely to change\n    style: [\n      // <style type=\"text/css\">:root { color: red }</style>\n      { children: ':root { color: red }', type: 'text/css' }\n    ],\n    noscript: [\n      // <noscript>JavaScript is required</noscript>\n      { children: 'JavaScript is required' }\n    ]\n  }\n}\n```"
          ],
          "tsType": "typeof import('../src/types/head').AppHeadMetaObject",
          "markdownType": "SrcTypesHeadAppHeadMetaObject",
          "id": "#app/head",
          "default": {
            "meta": [
              {
                "name": "viewport",
                "content": "width=device-width, initial-scale=1"
              },
              {
                "charset": "utf-8"
              }
            ],
            "link": [],
            "style": [],
            "script": [],
            "noscript": []
          },
          "type": "object"
        }
      },
      "default": {
        "baseURL": "/",
        "buildAssetsDir": "/_nuxt/",
        "assetsPath": {},
        "head": {
          "meta": [
            {
              "name": "viewport",
              "content": "width=device-width, initial-scale=1"
            },
            {
              "charset": "utf-8"
            }
          ],
          "link": [],
          "style": [],
          "script": [],
          "noscript": []
        }
      },
      "type": "object"
    },
    "appTemplatePath": {
      "title": "The path to an HTML template file for rendering Nuxt responses. Uses `<srcDir>/app.html` if it exists, or the Nuxt's default template if not.",
      "description": "",
      "tags": [
        "@example\n```html\n<!DOCTYPE html>\n<html {{ HTML_ATTRS }}>\n  <head {{ HEAD_ATTRS }}>\n    {{ HEAD }}\n  </head>\n  <body {{ BODY_ATTRS }}>\n    {{ APP }}\n  </body>\n</html>\n```"
      ],
      "id": "#appTemplatePath",
      "default": "/home/runner/work/bridge/bridge/packages/bridge-schema/views/app.template.html",
      "type": "string"
    },
    "store": {
      "title": "Enable or disable Vuex store.",
      "description": "By default, it is enabled if there is a `store/` directory.",
      "tags": [],
      "id": "#store",
      "default": false,
      "type": "boolean"
    },
    "vueMeta": {
      "title": "Options to pass directly to `vue-meta`.",
      "description": "",
      "tags": [
        "@see [documentation](https://vue-meta.nuxtjs.org/api/#plugin-options)."
      ],
      "tsType": "typeof import('vue-meta').VueMetaOptions",
      "markdownType": "VueMetaVueMetaOptions",
      "id": "#vueMeta",
      "default": null,
      "type": "any"
    },
    "head": {
      "title": "Set default configuration for `<head>` on every page.",
      "description": "",
      "tags": [
        "@see [documentation](https://vue-meta.nuxtjs.org/api/#metainfo-properties) for specifics."
      ],
      "tsType": "typeof import('vue-meta').MetaInfo",
      "markdownType": "VueMetaMetaInfo",
      "id": "#head",
      "properties": {
        "meta": {
          "title": "Each item in the array maps to a newly-created `<meta>` element, where object properties map to attributes.",
          "description": "",
          "tags": [],
          "id": "#head/meta",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "link": {
          "title": "Each item in the array maps to a newly-created `<link>` element, where object properties map to attributes.",
          "description": "",
          "tags": [],
          "id": "#head/link",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "style": {
          "title": "Each item in the array maps to a newly-created `<style>` element, where object properties map to attributes.",
          "description": "",
          "tags": [],
          "id": "#head/style",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "script": {
          "title": "Each item in the array maps to a newly-created `<script>` element, where object properties map to attributes.",
          "description": "",
          "tags": [],
          "id": "#head/script",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "default": {
        "meta": [],
        "link": [],
        "style": [],
        "script": []
      },
      "type": "object"
    },
    "meta": {
      "title": "",
      "description": "",
      "tags": [
        "@deprecated - use `head` instead"
      ],
      "id": "#meta",
      "properties": {
        "meta": {
          "type": "array",
          "id": "#meta/meta",
          "default": [],
          "items": {
            "type": "any"
          }
        },
        "link": {
          "type": "array",
          "id": "#meta/link",
          "default": [],
          "items": {
            "type": "any"
          }
        },
        "style": {
          "type": "array",
          "id": "#meta/style",
          "default": [],
          "items": {
            "type": "any"
          }
        },
        "script": {
          "type": "array",
          "id": "#meta/script",
          "default": [],
          "items": {
            "type": "any"
          }
        }
      },
      "default": {
        "meta": [],
        "link": [],
        "style": [],
        "script": []
      },
      "type": "object"
    },
    "fetch": {
      "title": "Configuration for the Nuxt `fetch()` hook.",
      "description": "",
      "tags": [],
      "id": "#fetch",
      "properties": {
        "server": {
          "title": "Whether to enable `fetch()` on the server.",
          "description": "",
          "tags": [],
          "id": "#fetch/server",
          "default": true,
          "type": "boolean"
        },
        "client": {
          "title": "Whether to enable `fetch()` on the client.",
          "description": "",
          "tags": [],
          "id": "#fetch/client",
          "default": true,
          "type": "boolean"
        }
      },
      "default": {
        "server": true,
        "client": true
      },
      "type": "object"
    },
    "extendPlugins": {
      "title": "You may want to extend plugins or change their order. For this, you can pass a function using `extendPlugins`. It accepts an array of plugin objects and should return an array of plugin objects.",
      "description": "",
      "tags": [],
      "tsType": "(plugins: Array<{ src: string, mode?: 'client' | 'server' }>) => Array<{ src: string, mode?: 'client' | 'server' }>",
      "id": "#extendPlugins",
      "default": null,
      "type": "any"
    },
    "layouts": {
      "title": "An object where each key name maps to a path to a layout .vue file.",
      "description": "Normally, there is no need to configure this directly.",
      "tags": [],
      "tsType": "Record<string, string>",
      "id": "#layouts",
      "default": {},
      "type": "any"
    },
    "ErrorPage": {
      "title": "Set a custom error page layout.",
      "description": "Normally, there is no need to configure this directly.",
      "tags": [],
      "type": "string",
      "tsType": "string",
      "id": "#ErrorPage",
      "default": null
    },
    "loading": {
      "title": "Configure the Nuxt loading progress bar component that's shown between routes. Set to `false` to disable. You can also customize it or create your own component.",
      "description": "",
      "tags": [],
      "id": "#loading",
      "properties": {
        "color": {
          "title": "CSS color of the progress bar.",
          "description": "",
          "tags": [],
          "id": "#loading/color",
          "default": "black",
          "type": "string"
        },
        "failedColor": {
          "title": "CSS color of the progress bar when an error appended while rendering the route (if data or fetch sent back an error, for example).",
          "description": "",
          "tags": [],
          "id": "#loading/failedColor",
          "default": "red",
          "type": "string"
        },
        "height": {
          "title": "Height of the progress bar (used in the style property of the progress bar).",
          "description": "",
          "tags": [],
          "id": "#loading/height",
          "default": "2px",
          "type": "string"
        },
        "throttle": {
          "title": "In ms, wait for the specified time before displaying the progress bar. Useful for preventing the bar from flashing.",
          "description": "",
          "tags": [],
          "id": "#loading/throttle",
          "default": 200,
          "type": "number"
        },
        "duration": {
          "title": "In ms, the maximum duration of the progress bar, Nuxt assumes that the route will be rendered before 5 seconds.",
          "description": "",
          "tags": [],
          "id": "#loading/duration",
          "default": 5000,
          "type": "number"
        },
        "continuous": {
          "title": "Keep animating progress bar when loading takes longer than duration.",
          "description": "",
          "tags": [],
          "id": "#loading/continuous",
          "default": false,
          "type": "boolean"
        },
        "rtl": {
          "title": "Set the direction of the progress bar from right to left.",
          "description": "",
          "tags": [],
          "id": "#loading/rtl",
          "default": false,
          "type": "boolean"
        },
        "css": {
          "title": "Set to `false` to remove default progress bar styles (and add your own).",
          "description": "",
          "tags": [],
          "id": "#loading/css",
          "default": true,
          "type": "boolean"
        }
      },
      "default": {
        "color": "black",
        "failedColor": "red",
        "height": "2px",
        "throttle": 200,
        "duration": 5000,
        "continuous": false,
        "rtl": false,
        "css": true
      },
      "type": "object"
    },
    "loadingIndicator": {
      "title": "Show a loading spinner while the page is loading (only when `ssr: false`).",
      "description": "Set to `false` to disable. Alternatively, you can pass a string name or an object for more configuration. The name can refer to an indicator from [SpinKit](https://tobiasahlin.com/spinkit/) or a path to an HTML template of the indicator source code (in this case, all the other options will be passed to the template).",
      "tags": [],
      "id": "#loadingIndicator",
      "default": {
        "name": "default",
        "color": "black",
        "color2": "#F5F5F5",
        "background": "white",
        "loading": "Loading..."
      },
      "type": "object"
    },
    "pageTransition": {
      "title": "Used to set the default properties of the page transitions.",
      "description": "You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your pages.",
      "tags": [
        "@see [vue@2 documentation](https://v2.vuejs.org/v2/guide/transitions.html)",
        "@see [vue@3 documentation](https://vuejs.org/guide/built-ins/transition-group.html#enter-leave-transitions)"
      ],
      "id": "#pageTransition",
      "default": {
        "name": "page",
        "mode": "out-in",
        "appear": false,
        "appearClass": "appear",
        "appearActiveClass": "appear-active",
        "appearToClass": "appear-to"
      },
      "type": "object"
    },
    "layoutTransition": {
      "title": "Used to set the default properties of the layout transitions.",
      "description": "You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your layouts.",
      "tags": [
        "@see [vue@2 documentation](https://v2.vuejs.org/v2/guide/transitions.html)"
      ],
      "id": "#layoutTransition",
      "default": {
        "name": "layout",
        "mode": "out-in"
      },
      "type": "object"
    },
    "features": {
      "title": "You can disable specific Nuxt features that you do not want.",
      "description": "",
      "tags": [],
      "id": "#features",
      "properties": {
        "store": {
          "title": "Set to false to disable Nuxt vuex integration",
          "description": "",
          "tags": [],
          "id": "#features/store",
          "default": true,
          "type": "boolean"
        },
        "layouts": {
          "title": "Set to false to disable layouts",
          "description": "",
          "tags": [],
          "id": "#features/layouts",
          "default": true,
          "type": "boolean"
        },
        "meta": {
          "title": "Set to false to disable Nuxt integration with `vue-meta` and the `head` property",
          "description": "",
          "tags": [],
          "id": "#features/meta",
          "default": true,
          "type": "boolean"
        },
        "middleware": {
          "title": "Set to false to disable middleware",
          "description": "",
          "tags": [],
          "id": "#features/middleware",
          "default": true,
          "type": "boolean"
        },
        "transitions": {
          "title": "Set to false to disable transitions",
          "description": "",
          "tags": [],
          "id": "#features/transitions",
          "default": true,
          "type": "boolean"
        },
        "deprecations": {
          "title": "Set to false to disable support for deprecated features and aliases",
          "description": "",
          "tags": [],
          "id": "#features/deprecations",
          "default": true,
          "type": "boolean"
        },
        "validate": {
          "title": "Set to false to disable the Nuxt `validate()` hook",
          "description": "",
          "tags": [],
          "id": "#features/validate",
          "default": true,
          "type": "boolean"
        },
        "useAsyncData": {
          "title": "Set to false to disable the Nuxt `asyncData()` hook",
          "description": "",
          "tags": [],
          "id": "#features/useAsyncData",
          "default": true,
          "type": "boolean"
        },
        "fetch": {
          "title": "Set to false to disable the Nuxt `fetch()` hook",
          "description": "",
          "tags": [],
          "id": "#features/fetch",
          "default": true,
          "type": "boolean"
        },
        "clientOnline": {
          "title": "Set to false to disable `$nuxt.isOnline`",
          "description": "",
          "tags": [],
          "id": "#features/clientOnline",
          "default": true,
          "type": "boolean"
        },
        "clientPrefetch": {
          "title": "Set to false to disable prefetching behavior in `<NuxtLink>`",
          "description": "",
          "tags": [],
          "id": "#features/clientPrefetch",
          "default": true,
          "type": "boolean"
        },
        "componentAliases": {
          "title": "Set to false to disable extra component aliases like `<NLink>` and `<NChild>`",
          "description": "",
          "tags": [],
          "id": "#features/componentAliases",
          "default": true,
          "type": "boolean"
        },
        "componentClientOnly": {
          "title": "Set to false to disable the `<ClientOnly>` component (see [docs](https://github.com/egoist/vue-client-only))",
          "description": "",
          "tags": [],
          "id": "#features/componentClientOnly",
          "default": true,
          "type": "boolean"
        }
      },
      "default": {
        "store": true,
        "layouts": true,
        "meta": true,
        "middleware": true,
        "transitions": true,
        "deprecations": true,
        "validate": true,
        "useAsyncData": true,
        "fetch": true,
        "clientOnline": true,
        "clientPrefetch": true,
        "componentAliases": true,
        "componentClientOnly": true
      },
      "type": "object"
    },
    "build": {
      "id": "#build",
      "properties": {
        "quiet": {
          "title": "Suppresses most of the build output log.",
          "description": "It is enabled by default when a CI or test environment is detected.",
          "tags": [
            "@see [std-env](https://github.com/unjs/std-env)"
          ],
          "id": "#build/quiet",
          "default": true,
          "type": "boolean"
        },
        "analyze": {
          "title": "Nuxt uses `webpack-bundle-analyzer` to visualize your bundles and how to optimize them.",
          "description": "Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).",
          "tags": [
            "@example\n```js\nanalyze: {\n  analyzerMode: 'static'\n}\n```"
          ],
          "tsType": "boolean | typeof import('webpack-bundle-analyzer').BundleAnalyzerPlugin.Options | typeof import('rollup-plugin-visualizer').PluginVisualizerOptions",
          "markdownType": "boolean | WebpackBundleAnalyzerBundleAnalyzerPluginOptions | RollupPluginVisualizerPluginVisualizerOptions",
          "id": "#build/analyze",
          "default": false,
          "type": "boolean"
        },
        "profile": {
          "title": "Enable the profiler in webpackbar.",
          "description": "It is normally enabled by CLI argument `--profile`.",
          "tags": [
            "@see [webpackbar](https://github.com/unjs/webpackbar#profile)"
          ],
          "id": "#build/profile",
          "default": false,
          "type": "boolean"
        },
        "extractCSS": {
          "title": "Enables Common CSS Extraction using [Vue Server Renderer guidelines](https://v2.ssr.vuejs.org/guide/css.html).",
          "description": "Using [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin/) under the hood, your CSS will be extracted into separate files, usually one per component. This allows caching your CSS and JavaScript separately and is worth trying if you have a lot of global or shared CSS.",
          "tags": [
            "@example\n```js\nexport default {\n  build: {\n    extractCSS: true,\n    // or\n    extractCSS: {\n      ignoreOrder: true\n    }\n  }\n}\n```",
            "If you want to extract all your CSS to a single file, there is a workaround for this.\nHowever, note that it is not recommended to extract everything into a single file.\nExtracting into multiple CSS files is better for caching and preload isolation. It\ncan also improve page performance by downloading and resolving only those resources\nthat are needed.",
            "@example\n```js\nexport default {\n  build: {\n    extractCSS: true,\n    optimization: {\n      splitChunks: {\n        cacheGroups: {\n          styles: {\n            name: 'styles',\n            test: /\\.(css|vue)$/,\n            chunks: 'all',\n            enforce: true\n          }\n        }\n      }\n    }\n  }\n}\n```"
          ],
          "tsType": "boolean | typeof import('extract-css-chunks-webpack-plugin').PluginOptions",
          "markdownType": "boolean | ExtractCssChunksWebpackPluginPluginOptions",
          "id": "#build/extractCSS",
          "default": false,
          "type": "boolean"
        },
        "cssSourceMap": {
          "title": "Enables CSS source map support (defaults to true in development)",
          "description": "",
          "tags": [],
          "id": "#build/cssSourceMap",
          "default": {},
          "type": "any"
        },
        "ssr": {
          "title": "Creates special webpack bundle for SSR renderer. It is normally not necessary to change this value.",
          "description": "",
          "tags": [],
          "id": "#build/ssr",
          "default": {},
          "type": "any"
        },
        "parallel": {
          "title": "Enable [thread-loader](https://github.com/webpack-contrib/thread-loader#thread-loader) when building app with webpack.",
          "description": "",
          "tags": [
            "@warning This is an unstable feature."
          ],
          "id": "#build/parallel",
          "default": false,
          "type": "boolean"
        },
        "cache": {
          "title": "Enable caching for [`terser-webpack-plugin`](https://github.com/webpack-contrib/terser-webpack-plugin#options) and [`cache-loader`](https://github.com/webpack-contrib/cache-loader#cache-loader).",
          "description": "",
          "tags": [
            "@warning This is an unstable feature."
          ],
          "id": "#build/cache",
          "default": false,
          "type": "boolean"
        },
        "standalone": {
          "title": "Inline server bundle dependencies.",
          "description": "This mode bundles `node_modules` that are normally preserved as externals in the server build.",
          "tags": [
            "@warning Runtime dependencies (modules, `nuxt.config`, server middleware and the static directory) are not bundled.\nThis feature only disables use of [webpack-externals](https://webpack.js.org/configuration/externals/) for server-bundle.",
            "@note You can enable standalone bundling by passing `--standalone` via the command line.",
            "@see [context](https://github.com/nuxt/nuxt.js/pull/4661)"
          ],
          "id": "#build/standalone",
          "default": false,
          "type": "boolean"
        },
        "publicPath": {
          "title": "If you are uploading your dist files to a CDN, you can set the publicPath to your CDN.",
          "description": "",
          "tags": [
            "@note This is only applied in production.",
            "The value of this property at runtime will override the configuration of an app that\nhas already been built.",
            "@example\n```js\nbuild: {\n  publicPath: process.env.PUBLIC_PATH || 'https://cdn.nuxtjs.org'\n}\n```"
          ],
          "id": "#build/publicPath",
          "default": {},
          "type": "any"
        },
        "serverURLPolyfill": {
          "title": "The polyfill library to load to provide URL and URLSearchParams.",
          "description": "Defaults to `'url'` ([see package](https://www.npmjs.com/package/url)).",
          "tags": [],
          "id": "#build/serverURLPolyfill",
          "default": "url",
          "type": "string"
        },
        "filenames": {
          "title": "Customize bundle filenames.",
          "description": "To understand a bit more about the use of manifests, take a look at [this webpack documentation](https://webpack.js.org/guides/code-splitting/).",
          "tags": [
            "@note Be careful when using non-hashed based filenames in production\nas most browsers will cache the asset and not detect the changes on first load.",
            "This example changes fancy chunk names to numerical ids:",
            "@example\n```js\nfilenames: {\n  chunk: ({ isDev }) => (isDev ? '[name].js' : '[id].[contenthash].js')\n}\n```"
          ],
          "tsType": "Record<string, ((arg: any) => string)>",
          "id": "#build/filenames",
          "properties": {
            "app": {
              "type": "function",
              "id": "#build/filenames/app"
            },
            "chunk": {
              "type": "function",
              "id": "#build/filenames/chunk"
            },
            "css": {
              "type": "function",
              "id": "#build/filenames/css"
            },
            "img": {
              "type": "function",
              "id": "#build/filenames/img"
            },
            "font": {
              "type": "function",
              "id": "#build/filenames/font"
            },
            "video": {
              "type": "function",
              "id": "#build/filenames/video"
            }
          },
          "default": {},
          "type": "object"
        },
        "loaders": {
          "title": "Customize the options of Nuxt's integrated webpack loaders.",
          "description": "",
          "tags": [],
          "id": "#build/loaders",
          "properties": {
            "file": {
              "id": "#build/loaders/file",
              "properties": {
                "esModule": {
                  "type": "boolean",
                  "id": "#build/loaders/file/esModule",
                  "default": false
                }
              },
              "default": {
                "esModule": false
              },
              "type": "object"
            },
            "fontUrl": {
              "id": "#build/loaders/fontUrl",
              "properties": {
                "esModule": {
                  "type": "boolean",
                  "id": "#build/loaders/fontUrl/esModule",
                  "default": false
                },
                "limit": {
                  "type": "number",
                  "id": "#build/loaders/fontUrl/limit",
                  "default": 1000
                }
              },
              "default": {
                "esModule": false,
                "limit": 1000
              },
              "type": "object"
            },
            "imgUrl": {
              "id": "#build/loaders/imgUrl",
              "properties": {
                "esModule": {
                  "type": "boolean",
                  "id": "#build/loaders/imgUrl/esModule",
                  "default": false
                },
                "limit": {
                  "type": "number",
                  "id": "#build/loaders/imgUrl/limit",
                  "default": 1000
                }
              },
              "default": {
                "esModule": false,
                "limit": 1000
              },
              "type": "object"
            },
            "pugPlain": {
              "id": "#build/loaders/pugPlain",
              "default": {},
              "type": "any"
            },
            "vue": {
              "id": "#build/loaders/vue",
              "properties": {
                "productionMode": {
                  "id": "#build/loaders/vue/productionMode",
                  "default": true,
                  "type": "boolean"
                },
                "transformAssetUrls": {
                  "id": "#build/loaders/vue/transformAssetUrls",
                  "properties": {
                    "video": {
                      "type": "string",
                      "id": "#build/loaders/vue/transformAssetUrls/video",
                      "default": "src"
                    },
                    "source": {
                      "type": "string",
                      "id": "#build/loaders/vue/transformAssetUrls/source",
                      "default": "src"
                    },
                    "object": {
                      "type": "string",
                      "id": "#build/loaders/vue/transformAssetUrls/object",
                      "default": "src"
                    },
                    "embed": {
                      "type": "string",
                      "id": "#build/loaders/vue/transformAssetUrls/embed",
                      "default": "src"
                    }
                  },
                  "default": {
                    "video": "src",
                    "source": "src",
                    "object": "src",
                    "embed": "src"
                  },
                  "type": "object"
                },
                "compilerOptions": {
                  "id": "#build/loaders/vue/compilerOptions",
                  "default": {},
                  "type": "any"
                }
              },
              "default": {
                "productionMode": true,
                "transformAssetUrls": {
                  "video": "src",
                  "source": "src",
                  "object": "src",
                  "embed": "src"
                },
                "compilerOptions": {}
              },
              "type": "object"
            },
            "css": {
              "id": "#build/loaders/css",
              "properties": {
                "importLoaders": {
                  "type": "number",
                  "id": "#build/loaders/css/importLoaders",
                  "default": 0
                },
                "esModule": {
                  "type": "boolean",
                  "id": "#build/loaders/css/esModule",
                  "default": false
                }
              },
              "default": {
                "importLoaders": 0,
                "esModule": false,
                "sourcemap": true
              },
              "type": "object"
            },
            "cssModules": {
              "id": "#build/loaders/cssModules",
              "properties": {
                "importLoaders": {
                  "type": "number",
                  "id": "#build/loaders/cssModules/importLoaders",
                  "default": 0
                },
                "esModule": {
                  "type": "boolean",
                  "id": "#build/loaders/cssModules/esModule",
                  "default": false
                },
                "modules": {
                  "id": "#build/loaders/cssModules/modules",
                  "properties": {
                    "localIdentName": {
                      "type": "string",
                      "id": "#build/loaders/cssModules/modules/localIdentName",
                      "default": "[local]_[hash:base64:5]"
                    }
                  },
                  "default": {
                    "localIdentName": "[local]_[hash:base64:5]"
                  },
                  "type": "object"
                }
              },
              "default": {
                "importLoaders": 0,
                "esModule": false,
                "modules": {
                  "localIdentName": "[local]_[hash:base64:5]"
                },
                "sourcemap": true
              },
              "type": "object"
            },
            "less": {
              "id": "#build/loaders/less",
              "default": {
                "sourcemap": true
              },
              "type": "any"
            },
            "sass": {
              "id": "#build/loaders/sass",
              "properties": {
                "sassOptions": {
                  "id": "#build/loaders/sass/sassOptions",
                  "properties": {
                    "indentedSyntax": {
                      "type": "boolean",
                      "id": "#build/loaders/sass/sassOptions/indentedSyntax",
                      "default": true
                    }
                  },
                  "default": {
                    "indentedSyntax": true
                  },
                  "type": "object"
                }
              },
              "default": {
                "sassOptions": {
                  "indentedSyntax": true
                },
                "sourcemap": true
              },
              "type": "object"
            },
            "scss": {
              "id": "#build/loaders/scss",
              "default": {
                "sourcemap": true
              },
              "type": "any"
            },
            "stylus": {
              "id": "#build/loaders/stylus",
              "default": {
                "sourcemap": true
              },
              "type": "any"
            },
            "vueStyle": {
              "id": "#build/loaders/vueStyle",
              "default": {
                "sourcemap": true
              },
              "type": "any"
            }
          },
          "default": {
            "file": {
              "esModule": false
            },
            "fontUrl": {
              "esModule": false,
              "limit": 1000
            },
            "imgUrl": {
              "esModule": false,
              "limit": 1000
            },
            "pugPlain": {},
            "vue": {
              "productionMode": true,
              "transformAssetUrls": {
                "video": "src",
                "source": "src",
                "object": "src",
                "embed": "src"
              },
              "compilerOptions": {}
            },
            "css": {
              "importLoaders": 0,
              "esModule": false,
              "sourcemap": true
            },
            "cssModules": {
              "importLoaders": 0,
              "esModule": false,
              "modules": {
                "localIdentName": "[local]_[hash:base64:5]"
              },
              "sourcemap": true
            },
            "less": {
              "sourcemap": true
            },
            "sass": {
              "sassOptions": {
                "indentedSyntax": true
              },
              "sourcemap": true
            },
            "scss": {
              "sourcemap": true
            },
            "stylus": {
              "sourcemap": true
            },
            "vueStyle": {
              "sourcemap": true
            }
          },
          "type": "object"
        },
        "styleResources": {
          "title": "",
          "description": "",
          "tags": [
            "@deprecated  Use [style-resources-module](https://github.com/nuxt-community/style-resources-module/)"
          ],
          "id": "#build/styleResources",
          "default": {},
          "type": "any"
        },
        "plugins": {
          "title": "Add webpack plugins.",
          "description": "",
          "tags": [
            "@example\n```js\nimport webpack from 'webpack'\nimport { version } from './package.json'\n// ...\nplugins: [\n  new webpack.DefinePlugin({\n    'process.VERSION': version\n  })\n]\n```"
          ],
          "id": "#build/plugins",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "terser": {
          "title": "Terser plugin options.",
          "description": "Set to false to disable this plugin, or pass an object of options.",
          "tags": [
            "@see [terser-webpack-plugin documentation](https://github.com/webpack-contrib/terser-webpack-plugin)",
            "@note Enabling sourcemap will leave `//# sourcemappingURL` linking comment at\nthe end of each output file if webpack `config.devtool` is set to `source-map`."
          ],
          "id": "#build/terser",
          "default": {},
          "type": "any"
        },
        "hardSource": {
          "title": "Enables the [HardSourceWebpackPlugin](https://github.com/mzgoddard/hard-source-webpack-plugin) for improved caching.",
          "description": "",
          "tags": [
            "@warning unstable"
          ],
          "id": "#build/hardSource",
          "default": false,
          "type": "boolean"
        },
        "aggressiveCodeRemoval": {
          "title": "Hard-replaces `typeof process`, `typeof window` and `typeof document` to tree-shake bundle.",
          "description": "",
          "tags": [],
          "id": "#build/aggressiveCodeRemoval",
          "default": false,
          "type": "boolean"
        },
        "optimizeCSS": {
          "title": "OptimizeCSSAssets plugin options.",
          "description": "Defaults to true when `extractCSS` is enabled.",
          "tags": [
            "@see [optimize-css-assets-webpack-plugin documentation](https://github.com/NMFR/optimize-css-assets-webpack-plugin)."
          ],
          "id": "#build/optimizeCSS",
          "default": false,
          "type": "boolean"
        },
        "optimization": {
          "title": "Configure [webpack optimization](https://webpack.js.org/configuration/optimization/).",
          "description": "",
          "tags": [],
          "id": "#build/optimization",
          "properties": {
            "runtimeChunk": {
              "type": "string",
              "id": "#build/optimization/runtimeChunk",
              "default": "single"
            },
            "minimize": {
              "title": "Set minimize to false to disable all minimizers. (It is disabled in development by default)",
              "description": "",
              "tags": [],
              "id": "#build/optimization/minimize",
              "default": true,
              "type": "boolean"
            },
            "minimizer": {
              "title": "You can set minimizer to a customized array of plugins.",
              "description": "",
              "tags": [],
              "id": "#build/optimization/minimizer",
              "default": {},
              "type": "any"
            },
            "splitChunks": {
              "id": "#build/optimization/splitChunks",
              "properties": {
                "chunks": {
                  "type": "string",
                  "id": "#build/optimization/splitChunks/chunks",
                  "default": "all"
                },
                "automaticNameDelimiter": {
                  "type": "string",
                  "id": "#build/optimization/splitChunks/automaticNameDelimiter",
                  "default": "/"
                },
                "cacheGroups": {
                  "id": "#build/optimization/splitChunks/cacheGroups",
                  "default": {},
                  "type": "any"
                }
              },
              "default": {
                "chunks": "all",
                "automaticNameDelimiter": "/",
                "cacheGroups": {}
              },
              "type": "object"
            }
          },
          "default": {
            "runtimeChunk": "single",
            "minimize": true,
            "minimizer": {},
            "splitChunks": {
              "chunks": "all",
              "automaticNameDelimiter": "/",
              "cacheGroups": {}
            }
          },
          "type": "object"
        },
        "splitChunks": {
          "title": "Whether to split code for `layout`, `pages` and `commons` chunks.",
          "description": "Commons libs include `vue`, `vue-loader`, `vue-router`, `vuex`, etc.",
          "tags": [],
          "id": "#build/splitChunks",
          "properties": {
            "layouts": {
              "type": "boolean",
              "id": "#build/splitChunks/layouts",
              "default": false
            },
            "pages": {
              "type": "boolean",
              "id": "#build/splitChunks/pages",
              "default": true
            },
            "commons": {
              "type": "boolean",
              "id": "#build/splitChunks/commons",
              "default": true
            }
          },
          "default": {
            "layouts": false,
            "pages": true,
            "commons": true
          },
          "type": "object"
        },
        "corejs": {
          "title": "Nuxt will automatically detect the current version of `core-js` in your project (`'auto'`), or you can specify which version you want to use (`2` or `3`).",
          "description": "",
          "tags": [],
          "id": "#build/corejs",
          "default": "auto",
          "type": "string"
        },
        "babel": {
          "title": "Customize your Babel configuration.",
          "description": "See [babel-loader options](https://github.com/babel/babel-loader#options) and [babel options](https://babeljs.io/docs/en/options).",
          "tags": [
            "@note `.babelrc` is ignored by default."
          ],
          "id": "#build/babel",
          "properties": {
            "configFile": {
              "type": "boolean",
              "id": "#build/babel/configFile",
              "default": false
            },
            "babelrc": {
              "type": "boolean",
              "id": "#build/babel/babelrc",
              "default": false
            },
            "plugins": {
              "title": "An array of Babel plugins to load, or a function that takes webpack context and returns an array of Babel plugins.",
              "description": "For more information see [Babel plugins options](https://babeljs.io/docs/en/options#plugins) and [babel-loader options](https://github.com/babel/babel-loader#options).",
              "tags": [],
              "id": "#build/babel/plugins",
              "default": [],
              "type": "array",
              "items": {
                "type": "any"
              }
            },
            "presets": {
              "title": "The Babel presets to be applied.",
              "description": "",
              "tags": [
                "@note The presets configured here will be applied to both the client and the server\nbuild. The target will be set by Nuxt accordingly (client/server). If you want to configure\nthe preset differently for the client or the server build, please use presets as a function.",
                "@warning It is highly recommended to use the default preset instead customizing.",
                "@example\n```js\nexport default {\n  build: {\n    babel: {\n      presets({ isServer }, [ preset, options ]) {\n        // change options directly\n        options.targets = isServer ? '...' :  '...'\n        options.corejs = '...'\n        // return nothing\n      }\n    }\n  }\n}\n```",
                "@example\n```js\nexport default {\n  build: {\n    babel: {\n      presets({ isServer }, [preset, options]) {\n        return [\n          [\n            preset,\n            {\n              targets: isServer ? '...' :  '...',\n              ...options\n            }\n          ],\n          [\n            // Other presets\n          ]\n        ]\n      }\n    }\n  }\n}\n```"
              ],
              "id": "#build/babel/presets",
              "default": {},
              "type": "any"
            },
            "cacheDirectory": {
              "id": "#build/babel/cacheDirectory",
              "default": {},
              "type": "any"
            }
          },
          "default": {
            "configFile": false,
            "babelrc": false,
            "plugins": [],
            "presets": {},
            "cacheDirectory": {}
          },
          "type": "object"
        },
        "postcss": {
          "title": "Customize PostCSS Loader plugins. Sames options as https://github.com/webpack-contrib/postcss-loader#options",
          "description": "",
          "tags": [],
          "id": "#build/postcss",
          "properties": {
            "execute": {
              "id": "#build/postcss/execute"
            },
            "postcssOptions": {
              "id": "#build/postcss/postcssOptions",
              "default": {},
              "type": "object"
            },
            "sourcemap": {
              "id": "#build/postcss/sourcemap"
            },
            "implementation": {
              "id": "#build/postcss/implementation"
            },
            "order": {
              "type": "string",
              "id": "#build/postcss/order",
              "default": ""
            }
          },
          "default": {
            "postcssOptions": {},
            "order": ""
          },
          "type": "object"
        },
        "html": {
          "id": "#build/html",
          "properties": {
            "minify": {
              "title": "Configuration for the html-minifier plugin used to minify HTML files created during the build process (will be applied for all modes).",
              "description": "",
              "tags": [
                "@warning If you make changes, they won't be merged with the defaults!",
                "@example\n```js\nexport default {\n  html: {\n    minify: {\n      collapseBooleanAttributes: true,\n      decodeEntities: true,\n      minifyCSS: true,\n      minifyJS: true,\n      processConditionalComments: true,\n      removeEmptyAttributes: true,\n      removeRedundantAttributes: true,\n      trimCustomFragments: true,\n      useShortDoctype: true\n    }\n  }\n}\n```"
              ],
              "id": "#build/html/minify",
              "properties": {
                "collapseBooleanAttributes": {
                  "type": "boolean",
                  "id": "#build/html/minify/collapseBooleanAttributes",
                  "default": true
                },
                "decodeEntities": {
                  "type": "boolean",
                  "id": "#build/html/minify/decodeEntities",
                  "default": true
                },
                "minifyCSS": {
                  "type": "boolean",
                  "id": "#build/html/minify/minifyCSS",
                  "default": true
                },
                "minifyJS": {
                  "type": "boolean",
                  "id": "#build/html/minify/minifyJS",
                  "default": true
                },
                "processConditionalComments": {
                  "type": "boolean",
                  "id": "#build/html/minify/processConditionalComments",
                  "default": true
                },
                "removeEmptyAttributes": {
                  "type": "boolean",
                  "id": "#build/html/minify/removeEmptyAttributes",
                  "default": true
                },
                "removeRedundantAttributes": {
                  "type": "boolean",
                  "id": "#build/html/minify/removeRedundantAttributes",
                  "default": true
                },
                "trimCustomFragments": {
                  "type": "boolean",
                  "id": "#build/html/minify/trimCustomFragments",
                  "default": true
                },
                "useShortDoctype": {
                  "type": "boolean",
                  "id": "#build/html/minify/useShortDoctype",
                  "default": true
                }
              },
              "default": {
                "collapseBooleanAttributes": true,
                "decodeEntities": true,
                "minifyCSS": true,
                "minifyJS": true,
                "processConditionalComments": true,
                "removeEmptyAttributes": true,
                "removeRedundantAttributes": true,
                "trimCustomFragments": true,
                "useShortDoctype": true
              },
              "type": "object"
            }
          },
          "default": {
            "minify": {
              "collapseBooleanAttributes": true,
              "decodeEntities": true,
              "minifyCSS": true,
              "minifyJS": true,
              "processConditionalComments": true,
              "removeEmptyAttributes": true,
              "removeRedundantAttributes": true,
              "trimCustomFragments": true,
              "useShortDoctype": true
            }
          },
          "type": "object"
        },
        "template": {
          "title": "Allows setting a different app template (other than `@nuxt/vue-app`)",
          "description": "",
          "tags": [],
          "id": "#build/template",
          "default": {},
          "type": "any"
        },
        "watch": {
          "title": "You can provide your custom files to watch and regenerate after changes.",
          "description": "This feature is especially useful for using with modules.",
          "tags": [
            "@example\n```js\n      watch: ['~/.nuxt/support.js']\n```"
          ],
          "id": "#build/watch",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "devMiddleware": {
          "title": "See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.",
          "description": "",
          "tags": [],
          "id": "#build/devMiddleware",
          "properties": {
            "stats": {
              "type": "string",
              "id": "#build/devMiddleware/stats",
              "default": "none"
            }
          },
          "default": {
            "stats": "none"
          },
          "type": "object"
        },
        "hotMiddleware": {
          "title": "See [webpack-hot-middleware](https://github.com/webpack-contrib/webpack-hot-middleware) for available options.",
          "description": "",
          "tags": [],
          "id": "#build/hotMiddleware",
          "default": {},
          "type": "any"
        },
        "vendor": {
          "id": "#build/vendor",
          "properties": {
            "$meta": {
              "id": "#build/vendor/$meta",
              "properties": {
                "deprecated": {
                  "type": "string",
                  "id": "#build/vendor/$meta/deprecated",
                  "default": "vendor has been deprecated since nuxt 2"
                }
              },
              "default": {
                "deprecated": "vendor has been deprecated since nuxt 2"
              },
              "type": "object"
            }
          },
          "default": {
            "$meta": {
              "deprecated": "vendor has been deprecated since nuxt 2"
            }
          },
          "type": "object"
        },
        "stats": {
          "title": "Set to `'none'` or `false` to disable stats printing out after a build.",
          "description": "",
          "tags": [],
          "id": "#build/stats",
          "properties": {
            "excludeAssets": {
              "type": "array",
              "id": "#build/stats/excludeAssets",
              "default": [
                {},
                {},
                {}
              ],
              "items": {
                "type": "object"
              }
            }
          },
          "default": false,
          "type": "boolean"
        },
        "friendlyErrors": {
          "title": "Set to `false` to disable the overlay provided by [FriendlyErrorsWebpackPlugin](https://github.com/nuxt/friendly-errors-webpack-plugin).",
          "description": "",
          "tags": [],
          "id": "#build/friendlyErrors",
          "default": true,
          "type": "boolean"
        },
        "additionalExtensions": {
          "title": "Additional extensions (beyond `['vue', 'js']` to support in `pages/`, `layouts/`, `middleware/`, etc.)",
          "description": "",
          "tags": [],
          "id": "#build/additionalExtensions",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "warningIgnoreFilters": {
          "title": "Filters to hide build warnings.",
          "description": "",
          "tags": [],
          "id": "#build/warningIgnoreFilters",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "followSymlinks": {
          "title": "Set to true to scan files within symlinks in the build (such as within `pages/`).",
          "description": "",
          "tags": [],
          "id": "#build/followSymlinks",
          "default": false,
          "type": "boolean"
        }
      },
      "default": {
        "quiet": true,
        "analyze": false,
        "profile": false,
        "extractCSS": false,
        "cssSourceMap": {},
        "ssr": {},
        "parallel": false,
        "cache": false,
        "standalone": false,
        "publicPath": {},
        "serverURLPolyfill": "url",
        "filenames": {},
        "loaders": {
          "file": {
            "esModule": false
          },
          "fontUrl": {
            "esModule": false,
            "limit": 1000
          },
          "imgUrl": {
            "esModule": false,
            "limit": 1000
          },
          "pugPlain": {},
          "vue": {
            "productionMode": true,
            "transformAssetUrls": {
              "video": "src",
              "source": "src",
              "object": "src",
              "embed": "src"
            },
            "compilerOptions": {}
          },
          "css": {
            "importLoaders": 0,
            "esModule": false,
            "sourcemap": true
          },
          "cssModules": {
            "importLoaders": 0,
            "esModule": false,
            "modules": {
              "localIdentName": "[local]_[hash:base64:5]"
            },
            "sourcemap": true
          },
          "less": {
            "sourcemap": true
          },
          "sass": {
            "sassOptions": {
              "indentedSyntax": true
            },
            "sourcemap": true
          },
          "scss": {
            "sourcemap": true
          },
          "stylus": {
            "sourcemap": true
          },
          "vueStyle": {
            "sourcemap": true
          }
        },
        "styleResources": {},
        "plugins": [],
        "terser": {},
        "hardSource": false,
        "aggressiveCodeRemoval": false,
        "optimizeCSS": false,
        "optimization": {
          "runtimeChunk": "single",
          "minimize": true,
          "minimizer": {},
          "splitChunks": {
            "chunks": "all",
            "automaticNameDelimiter": "/",
            "cacheGroups": {}
          }
        },
        "splitChunks": {
          "layouts": false,
          "pages": true,
          "commons": true
        },
        "corejs": "auto",
        "babel": {
          "configFile": false,
          "babelrc": false,
          "plugins": [],
          "presets": {},
          "cacheDirectory": {}
        },
        "postcss": {
          "postcssOptions": {},
          "order": ""
        },
        "html": {
          "minify": {
            "collapseBooleanAttributes": true,
            "decodeEntities": true,
            "minifyCSS": true,
            "minifyJS": true,
            "processConditionalComments": true,
            "removeEmptyAttributes": true,
            "removeRedundantAttributes": true,
            "trimCustomFragments": true,
            "useShortDoctype": true
          }
        },
        "template": {},
        "watch": [],
        "devMiddleware": {
          "stats": "none"
        },
        "hotMiddleware": {},
        "vendor": {
          "$meta": {
            "deprecated": "vendor has been deprecated since nuxt 2"
          }
        },
        "stats": false,
        "friendlyErrors": true,
        "additionalExtensions": [],
        "warningIgnoreFilters": [],
        "followSymlinks": false
      },
      "type": "object"
    },
    "cli": {
      "id": "#cli",
      "properties": {
        "badgeMessages": {
          "title": "Add a message to the CLI banner by adding a string to this array.",
          "description": "",
          "tags": [],
          "tsType": "string[]",
          "id": "#cli/badgeMessages",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "bannerColor": {
          "title": "Change the color of the 'Nuxt.js' title in the CLI banner.",
          "description": "",
          "tags": [],
          "id": "#cli/bannerColor",
          "default": "green",
          "type": "string"
        }
      },
      "default": {
        "badgeMessages": [],
        "bannerColor": "green"
      },
      "type": "object"
    },
    "editor": {
      "title": "Your preferred code editor to launch when debugging.",
      "description": "",
      "tags": [
        "@see [documentation](https://github.com/yyx990803/launch-editor#supported-editors)"
      ],
      "type": "string",
      "tsType": "string",
      "id": "#editor"
    },
    "watch": {
      "title": "The watch property lets you watch custom files for restarting the server.",
      "description": "`chokidar` is used to set up the watchers. To learn more about its pattern options, see chokidar documentation.",
      "tags": [
        "@see [chokidar](https://github.com/paulmillr/chokidar#api)",
        "@example\n```js\nwatch: ['~/custom/*.js']\n```"
      ],
      "tsType": "string[]",
      "id": "#watch",
      "default": [],
      "type": "array",
      "items": {
        "type": "any"
      }
    },
    "styleExtensions": {
      "title": "The style extensions that should be resolved by the Nuxt resolver (for example, in `css` property).",
      "description": "",
      "tags": [],
      "id": "#styleExtensions",
      "default": [
        ".css",
        ".pcss",
        ".postcss",
        ".styl",
        ".stylus",
        ".scss",
        ".sass",
        ".less"
      ],
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "dir": {
      "id": "#dir",
      "properties": {
        "assets": {
          "title": "The assets directory (aliased as `~assets` in your build).",
          "description": "",
          "tags": [],
          "id": "#dir/assets",
          "default": "assets",
          "type": "string"
        },
        "app": {
          "title": "The directory containing app template files like `app.html` and `router.scrollBehavior.js`",
          "description": "",
          "tags": [],
          "id": "#dir/app",
          "default": "app",
          "type": "string"
        },
        "globalName": {
          "title": "Allows customizing the global ID used in the main HTML template as well as the main Vue instance name and other options.",
          "description": "",
          "tags": [],
          "id": "#dir/globalName",
          "default": "nuxt",
          "type": "string"
        },
        "modern": {
          "title": "Whether to produce a separate modern build targeting browsers that support ES modules.",
          "description": "Set to `'server'` to enable server mode, where the Nuxt server checks browser version based on the user agent and serves the correct bundle.\nSet to `'client'` to serve both the modern bundle with `<script type=\"module\">` and the legacy bundle with `<script nomodule>`. It will also provide a `<link rel=\"modulepreload\">` for the modern bundle. Every browser that understands the module type will load the modern bundle while older browsers fall back to the legacy (transpiled) bundle.\nIf you have set `modern: true` and are generating your app or have `ssr: false`, modern will be set to `'client'`.\nIf you have set `modern: true` and are serving your app, modern will be set to `'server'`.",
          "tags": [
            "@see [concept of modern mode](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)"
          ],
          "tsType": "'server' | 'client' | boolean",
          "id": "#dir/modern",
          "default": {},
          "type": "any"
        },
        "mode": {
          "deprecated": "`mode` option is deprecated",
          "title": "",
          "description": "",
          "tags": [
            "@deprecated use `ssr` option"
          ],
          "id": "#dir/mode",
          "default": "universal",
          "type": "string"
        },
        "env": {
          "title": "The `env` property defines environment variables that should be available throughout your app (server- and client-side). They can be assigned using server-side environment variables.",
          "description": "",
          "tags": [
            "@note Nuxt uses webpack's `definePlugin` to define these environment variables.\nThis means that the actual `process` or `process.env` from Node.js is neither\navailable nor defined. Each of the `env` properties defined here is individually\nmapped to `process.env.xxxx` and converted during compilation.",
            "@note Environment variables starting with `NUXT_ENV_` are automatically injected\ninto the process environment."
          ],
          "id": "#dir/env",
          "default": {},
          "type": "object"
        },
        "createRequire": {
          "title": "Set the method Nuxt uses to require modules, such as loading `nuxt.config`, server middleware, and so on - defaulting to `jiti` (which has support for TypeScript and ESM syntax).",
          "description": "",
          "tags": [
            "@see [jiti](https://github.com/unjs/jiti)"
          ],
          "tsType": "'jiti' | 'native' | ((p: string | { filename: string }) => NodeRequire)",
          "id": "#dir/createRequire",
          "type": "function"
        },
        "target": {
          "title": "Whether your Nuxt app should be built to be served by the Nuxt server (`server`) or as static HTML files suitable for a CDN or other static file server (`static`).",
          "description": "This is unrelated to `ssr`.",
          "tags": [],
          "tsType": "'server' | 'static'",
          "id": "#dir/target",
          "default": "server",
          "type": "string"
        },
        "globals": {
          "title": "Customizes specific global names (they are based on `globalName` by default).",
          "description": "",
          "tags": [],
          "id": "#dir/globals",
          "properties": {
            "id": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/id",
              "type": "function"
            },
            "nuxt": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/nuxt",
              "type": "function"
            },
            "context": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/context",
              "type": "function"
            },
            "pluginPrefix": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/pluginPrefix",
              "type": "function"
            },
            "readyCallback": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/readyCallback",
              "type": "function"
            },
            "loadedCallback": {
              "title": "",
              "description": "",
              "tags": [],
              "tsType": "(globalName: string) => string",
              "id": "#dir/globals/loadedCallback",
              "type": "function"
            }
          },
          "default": {},
          "type": "object"
        },
        "store": {
          "title": "The folder which will be used to auto-generate your Vuex store structure.",
          "description": "",
          "tags": [],
          "id": "#dir/store",
          "default": "store",
          "type": "string"
        }
      },
      "default": {
        "store": "store",
        "assets": "assets",
        "app": "app",
        "globalName": "nuxt",
        "modern": {},
        "mode": "universal",
        "env": {},
        "target": "server",
        "globals": {}
      },
      "type": "object"
    },
    "serverMiddleware": {
      "title": "Server middleware are connect/express/h3-shaped functions that handle server-side requests. They run on the server and before the Vue renderer.",
      "description": "By adding entries to `serverMiddleware` you can register additional routes without the need for an external server.\nYou can pass a string, which can be the name of a node dependency or a path to a file. You can also pass an object with `path` and `handler` keys (`handler` can be a path or a function).",
      "tags": [
        "@note If you pass a function directly, it will only run in development mode.",
        "@example\n```js\nserverMiddleware: [\n  // Will register redirect-ssl npm package\n  'redirect-ssl',\n  // Will register file from project server-middleware directory to handle /server-middleware/* requires\n  { path: '/server-middleware', handler: '~/server-middleware/index.js' },\n  // We can create custom instances too, but only in development mode, they are ignored for the production bundle.\n  { path: '/static2', handler: serveStatic(fileURLToPath(new URL('./static2', import.meta.url))) }\n]\n```",
        "@note If you don't want middleware to run on all routes you should use the object\nform with a specific path.",
        "If you pass a string handler, Nuxt will expect that file to export a default function\nthat handles `(req, res, next) => void`.",
        "@example\n```js\nexport default function (req, res, next) {\n  // req is the Node.js http request object\n  console.log(req.url)\n  // res is the Node.js http response object\n  // next is a function to call to invoke the next middleware\n  // Don't forget to call next at the end if your middleware is not an endpoint!\n  next()\n}\n```",
        "Alternatively, it can export a connect/express/h3-type app instance.",
        "@example\n```js\nimport bodyParser from 'body-parser'\nimport createApp from 'express'\nconst app = createApp()\napp.use(bodyParser.json())\napp.all('/getJSON', (req, res) => {\n  res.json({ data: 'data' })\n})\nexport default app\n```",
        "Alternatively, instead of passing an array of `serverMiddleware`, you can pass an object\nwhose keys are the paths and whose values are the handlers (string or function).",
        "@example\n```js\nexport default {\n  serverMiddleware: {\n    '/a': '~/server-middleware/a.js',\n    '/b': '~/server-middleware/b.js',\n    '/c': '~/server-middleware/c.js'\n  }\n}\n```"
      ],
      "id": "#serverMiddleware",
      "default": [],
      "type": "array",
      "items": {
        "type": "any"
      }
    },
    "generate": {
      "id": "#generate",
      "properties": {
        "dir": {
          "title": "Directory name that holds all the assets and generated pages for a `static` build.",
          "description": "",
          "tags": [],
          "id": "#generate/dir",
          "default": "/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
          "type": "string"
        },
        "concurrency": {
          "title": "The number of routes that are generated concurrently in the same thread.",
          "description": "",
          "tags": [],
          "id": "#generate/concurrency",
          "default": 500,
          "type": "number"
        },
        "interval": {
          "title": "Interval in milliseconds between two render cycles to avoid flooding a potential API with calls.",
          "description": "",
          "tags": [],
          "id": "#generate/interval",
          "default": 0,
          "type": "number"
        },
        "subFolders": {
          "title": "Set to `false` to disable creating a directory + `index.html` for each route.",
          "description": "",
          "tags": [
            "@example\n```bash\n# subFolders: true\n-| dist/\n---| index.html\n---| about/\n-----| index.html\n---| products/\n-----| item/\n-------| index.html\n\n# subFolders: false\n-| dist/\n---| index.html\n---| about.html\n---| products/\n-----| item.html\n```"
          ],
          "id": "#generate/subFolders",
          "default": true,
          "type": "boolean"
        },
        "fallback": {
          "title": "The path to the fallback HTML file.",
          "description": "Set this as the error page in your static server configuration, so that unknown routes can be rendered (on the client-side) by Nuxt.\nIf unset or set to a falsy value, the name of the fallback HTML file will be `200.html`. If set to `true`, the filename will be `404.html`. If you provide a string as a value, it will be used instead.",
          "tags": [
            "@note Multiple services (e.g. Netlify) detect a `404.html` automatically. If\nyou configure your web server on your own, please consult its documentation\nto find out how to set up an error page (and set it to the `404.html` file)."
          ],
          "id": "#generate/fallback",
          "default": "200.html",
          "type": "string"
        },
        "crawler": {
          "title": "Set to `false` to disable generating pages discovered through crawling relative links in generated pages.",
          "description": "",
          "tags": [],
          "id": "#generate/crawler",
          "default": true,
          "type": "boolean"
        },
        "manifest": {
          "title": "Set to `false` to disable generating a `manifest.js` with a list of all generated pages.",
          "description": "",
          "tags": [],
          "id": "#generate/manifest",
          "default": true,
          "type": "boolean"
        },
        "nojekyll": {
          "title": "Set to `false` to disable generating a `.nojekyll` file (which aids compatibility with GitHub Pages).",
          "description": "",
          "tags": [],
          "id": "#generate/nojekyll",
          "default": true,
          "type": "boolean"
        },
        "cache": {
          "title": "Configure the cache (used with `static` target to avoid rebuilding when no files have changed).",
          "description": "Set to `false` to disable completely.",
          "tags": [],
          "id": "#generate/cache",
          "properties": {
            "ignore": {
              "title": "An array of files or directories to ignore. (It can also be a function that returns an array.)",
              "description": "",
              "tags": [],
              "id": "#generate/cache/ignore",
              "default": [],
              "type": "array",
              "items": {
                "type": "any"
              }
            },
            "globbyOptions": {
              "title": "Options to pass to [`globby`](https://github.com/sindresorhus/globby), which is used to generate a 'snapshot' of the source files.",
              "description": "",
              "tags": [],
              "id": "#generate/cache/globbyOptions",
              "properties": {
                "gitignore": {
                  "type": "boolean",
                  "id": "#generate/cache/globbyOptions/gitignore",
                  "default": true
                }
              },
              "default": {
                "gitignore": true
              },
              "type": "object"
            }
          },
          "default": {
            "ignore": [],
            "globbyOptions": {
              "gitignore": true
            }
          },
          "type": "object"
        },
        "staticAssets": {
          "id": "#generate/staticAssets",
          "properties": {
            "dir": {
              "title": "The directory underneath `/_nuxt/`, where static assets (payload, state and manifest files) will live.",
              "description": "",
              "tags": [],
              "id": "#generate/staticAssets/dir",
              "default": "static",
              "type": "string"
            },
            "base": {
              "title": "The full path to the directory underneath `/_nuxt/` where static assets (payload, state and manifest files) will live.",
              "description": "",
              "tags": [],
              "id": "#generate/staticAssets/base",
              "default": "/_nuxt/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
              "type": "string"
            },
            "versionBase": {
              "title": "The full path to the versioned directory where static assets for the current build are located.",
              "description": "",
              "tags": [],
              "id": "#generate/staticAssets/versionBase",
              "default": "",
              "type": "string"
            },
            "version": {
              "title": "A unique string to uniquely identify payload versions (defaults to the current timestamp).",
              "description": "",
              "tags": [],
              "id": "#generate/staticAssets/version",
              "default": "1692047426",
              "type": "string"
            }
          },
          "default": {
            "dir": "static",
            "base": "/_nuxt/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
            "versionBase": "",
            "version": "1692047426"
          },
          "type": "object"
        }
      },
      "default": {
        "dir": "/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
        "concurrency": 500,
        "interval": 0,
        "subFolders": true,
        "fallback": "200.html",
        "crawler": true,
        "manifest": true,
        "nojekyll": true,
        "cache": {
          "ignore": [],
          "globbyOptions": {
            "gitignore": true
          }
        },
        "staticAssets": {
          "dir": "static",
          "base": "/_nuxt/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
          "versionBase": "",
          "version": "1692047426"
        }
      },
      "type": "object"
    },
    "messages": {
      "id": "#messages",
      "properties": {
        "loading": {
          "title": "The text that displays on the Nuxt loading indicator when `ssr: false`.",
          "description": "",
          "tags": [],
          "id": "#messages/loading",
          "default": "Loading...",
          "type": "string"
        },
        "error_404": {
          "title": "The 404 text on the default Nuxt error page.",
          "description": "",
          "tags": [],
          "id": "#messages/error_404",
          "default": "This page could not be found",
          "type": "string"
        },
        "server_error": {
          "title": "The text to display on the default Nuxt error page when there has been a server error.",
          "description": "",
          "tags": [],
          "id": "#messages/server_error",
          "default": "Server error",
          "type": "string"
        },
        "nuxtjs": {
          "title": "The text (linked to nuxtjs.org) that appears on the built-in Nuxt error page.",
          "description": "",
          "tags": [],
          "id": "#messages/nuxtjs",
          "default": "Nuxt",
          "type": "string"
        },
        "back_to_home": {
          "title": "The text (linked to the home page) that appears on the built-in Nuxt error page.",
          "description": "",
          "tags": [],
          "id": "#messages/back_to_home",
          "default": "Back to the home page",
          "type": "string"
        },
        "server_error_details": {
          "title": "The message that will display on a white screen if the built-in Nuxt error page can't be rendered.",
          "description": "",
          "tags": [],
          "id": "#messages/server_error_details",
          "default": "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
          "type": "string"
        },
        "client_error": {
          "title": "The default error title (if there isn't a specific error message) on the built-in Nuxt error page.",
          "description": "",
          "tags": [],
          "id": "#messages/client_error",
          "default": "Error",
          "type": "string"
        },
        "client_error_details": {
          "title": "The error message (in debug mode) on the built-in Nuxt error page.",
          "description": "",
          "tags": [],
          "id": "#messages/client_error_details",
          "default": "An error occurred while rendering the page. Check developer tools console for details.",
          "type": "string"
        }
      },
      "default": {
        "loading": "Loading...",
        "error_404": "This page could not be found",
        "server_error": "Server error",
        "nuxtjs": "Nuxt",
        "back_to_home": "Back to the home page",
        "server_error_details": "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
        "client_error": "Error",
        "client_error_details": "An error occurred while rendering the page. Check developer tools console for details."
      },
      "type": "object"
    },
    "render": {
      "id": "#render",
      "properties": {
        "bundleRenderer": {
          "title": "Use this option to customize the Vue SSR bundle renderer. This option is skipped if `ssr: false`.",
          "description": "Read [docs for Vue 2](https://ssr.vuejs.org/api/#renderer-options) here.",
          "tags": [],
          "id": "#render/bundleRenderer",
          "properties": {
            "shouldPrefetch": {
              "type": "function",
              "id": "#render/bundleRenderer/shouldPrefetch"
            },
            "shouldPreload": {
              "type": "function",
              "id": "#render/bundleRenderer/shouldPreload"
            },
            "runInNewContext": {
              "title": "enabled by default for development",
              "description": "",
              "tags": [],
              "id": "#render/bundleRenderer/runInNewContext",
              "default": {},
              "type": "any"
            }
          },
          "default": {
            "runInNewContext": {}
          },
          "type": "object"
        },
        "crossorigin": {
          "title": "Configure the crossorigin attribute on `<link rel=\"stylesheet\">` and `<script>` tags in generated HTML. [More information](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin).",
          "description": "",
          "tags": [],
          "id": "#render/crossorigin",
          "default": {},
          "type": "any"
        },
        "resourceHints": {
          "title": "Adds prefetch and preload links for faster initial page load time. You probably don't want to disable this option unless you have many pages and routes.",
          "description": "",
          "tags": [],
          "id": "#render/resourceHints",
          "default": true,
          "type": "boolean"
        },
        "ssr": {
          "title": "Whether to enable rendering of HTML - either dynamically (in server mode) or at generate time.",
          "description": "This option is automatically set based on global SSR value if not provided. This can be useful to dynamically enable/disable SSR at runtime after image builds (with docker, for example).",
          "tags": [],
          "id": "#render/ssr",
          "default": {},
          "type": "any"
        },
        "ssrLog": {
          "title": "Forward server-side logs to the browser for better debugging (only available in development).",
          "description": "Set to `collapsed` to collapse the logs, or `false` to disable.",
          "tags": [],
          "id": "#render/ssrLog",
          "default": false,
          "type": "boolean"
        },
        "http2": {
          "title": "Configuration for HTTP2 push headers.",
          "description": "",
          "tags": [],
          "id": "#render/http2",
          "properties": {
            "push": {
              "title": "Set to true to enable HTTP2 push headers.",
              "description": "",
              "tags": [],
              "id": "#render/http2/push",
              "default": false,
              "type": "boolean"
            },
            "shouldPush": {
              "title": "",
              "description": "",
              "tags": [
                "@deprecated"
              ],
              "id": "#render/http2/shouldPush",
              "default": null,
              "type": "any"
            },
            "pushAssets": {
              "title": "You can control what links to push using this function. It receives `req`, `res`, `publicPath` and a `preloadFiles` array.",
              "description": "You can add your own assets to the array as well. Using `req` and `res` you can decide what links to push based on the request headers, for example using the cookie with application version.\nAssets will be joined together with `,` and passed as a single `Link` header.",
              "tags": [
                "@example\n```js\npushAssets: (req, res, publicPath, preloadFiles) =>\n  preloadFiles\n    .filter(f => f.asType === 'script' && f.file === 'runtime.js')\n    .map(f => `<${publicPath}${f.file}>; rel=preload; as=${f.asType}`)\n```"
              ],
              "id": "#render/http2/pushAssets",
              "default": null,
              "type": "any"
            }
          },
          "default": {
            "push": false,
            "shouldPush": null,
            "pushAssets": null
          },
          "type": "object"
        },
        "static": {
          "title": "Configure the behavior of the `static/` directory.",
          "description": "See [serve-static docs](https://github.com/expressjs/serve-static) for possible options.",
          "tags": [],
          "id": "#render/static",
          "properties": {
            "prefix": {
              "title": "Whether to add the router base to your static assets.",
              "description": "",
              "tags": [
                "@note some URL rewrites might not respect the prefix.",
                "@example\nAssets: favicon.ico\nRouter base: /t\nWith `prefix: true` (default): /t/favicon.ico\nWith `prefix: false`: /favicon.ico"
              ],
              "id": "#render/static/prefix",
              "default": true,
              "type": "boolean"
            }
          },
          "default": {
            "prefix": true
          },
          "type": "object"
        },
        "compressor": {
          "title": "Configure server compression.",
          "description": "Set to `false` to disable compression. You can also pass an object of options for [compression middleware](https://www.npmjs.com/package/compression), or use your own middleware by passing it in directly - for example, `otherComp({ myOptions: 'example' })`.",
          "tags": [],
          "tsType": "boolean | object | Function",
          "id": "#render/compressor",
          "properties": {
            "threshold": {
              "type": "number",
              "id": "#render/compressor/threshold",
              "default": 0
            }
          },
          "default": {
            "threshold": 0
          },
          "type": "object"
        },
        "etag": {
          "title": "To disable etag for pages set `etag: false`. See [etag docs](https://github.com/jshttp/etag) for possible options. You can use your own hash function by specifying etag.hash:",
          "description": "",
          "tags": [
            "@example\n```js\nimport { murmurHash128 } from 'murmurhash-native'\n\nexport default {\n  render: {\n    etag: {\n      hash: html => murmurHash128(html)\n    }\n  }\n}\n```\nIn this example we are using `murmurhash-native`, which is faster\nfor larger HTML body sizes. Note that the weak option is ignored\nwhen specifying your own hash function."
          ],
          "id": "#render/etag",
          "properties": {
            "hash": {
              "type": "boolean",
              "id": "#render/etag/hash",
              "default": false
            },
            "weak": {
              "type": "boolean",
              "id": "#render/etag/weak",
              "default": false
            }
          },
          "default": {
            "hash": false,
            "weak": false
          },
          "type": "object"
        },
        "csp": {
          "title": "Use this to configure Content-Security-Policy to load external resources. [Read more](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).",
          "description": "Set to `true` to enable, or you can pass options to fine-tune your CSP options.\n**Prerequisites**: These CSP settings are only effective when using Nuxt with `mode: 'server'` to serve your SSR application.\n**Updating settings**: These settings are read by the Nuxt server directly from `nuxt.config`. This means changes to these settings take effect when the server is restarted. There is no need to rebuild the application to update CSP settings.",
          "tags": [
            "@example\n```js\nexport default {\n  render: {\n    csp: {\n      hashAlgorithm: 'sha256',\n      policies: {\n        'script-src': [\n          'https://www.google-analytics.com',\n          'https://name.example.com'\n        ],\n        'report-uri': ['https://report.example.com/report-csp-violations']\n      },\n      addMeta: true\n    }\n  }\n}\n```",
            "The following example allows Google Analytics, LogRocket.io, and Sentry.io\nfor logging and analytic tracking.",
            "Review [this blog on Sentry.io](https://blog.sentry.io/2018/09/04/how-sentry-captures-csp-violations)\nto learn what tracking link you should use.",
            "@example\n```js\n// PRIMARY_HOSTS = `loc.example-website.com`\nexport default {\n  render: {\n    csp: {\n      reportOnly: true,\n      hashAlgorithm: 'sha256',\n      policies: {\n        'default-src': [\"'self'\"],\n        'img-src': ['https:', '*.google-analytics.com'],\n        'worker-src': [\"'self'\", `blob:`, PRIMARY_HOSTS, '*.logrocket.io'],\n        'style-src': [\"'self'\", \"'unsafe-inline'\", PRIMARY_HOSTS],\n        'script-src': [\n          \"'self'\",\n          \"'unsafe-inline'\",\n          PRIMARY_HOSTS,\n          'sentry.io',\n          '*.sentry-cdn.com',\n          '*.google-analytics.com',\n          '*.logrocket.io'\n        ],\n        'connect-src': [PRIMARY_HOSTS, 'sentry.io', '*.google-analytics.com'],\n        'form-action': [\"'self'\"],\n        'frame-ancestors': [\"'none'\"],\n        'object-src': [\"'none'\"],\n        'base-uri': [PRIMARY_HOSTS],\n        'report-uri': [\n          `https://sentry.io/api/<project>/security/?sentry_key=<key>`\n        ]\n      }\n    }\n  }\n}\n```"
          ],
          "id": "#render/csp",
          "default": false,
          "type": "boolean"
        },
        "dist": {
          "title": "Options used for serving distribution files. Only applicable in production.",
          "description": "See [serve-static docs](https://www.npmjs.com/package/serve-static) for possible options.",
          "tags": [],
          "id": "#render/dist",
          "properties": {
            "index": {
              "type": "boolean",
              "id": "#render/dist/index",
              "default": false
            },
            "maxAge": {
              "type": "string",
              "id": "#render/dist/maxAge",
              "default": "1y"
            }
          },
          "default": {
            "index": false,
            "maxAge": "1y"
          },
          "type": "object"
        },
        "fallback": {
          "title": "Configure fallback behavior for [`serve-placeholder` middleware](https://github.com/nuxt/serve-placeholder).",
          "description": "Example of allowing `.js` extension for routing (for example, `/repos/nuxt.js`):",
          "tags": [
            "@example\n```js\nexport default {\n  render: {\n    fallback: {\n      static: {\n        // Avoid sending 404 for these extensions\n        handlers: {\n          '.js': false\n        }\n      }\n    }\n  }\n}\n```"
          ],
          "id": "#render/fallback",
          "properties": {
            "dist": {
              "title": "For routes matching the publicPath (`/_nuxt/*`). Disable by setting to `false`.",
              "description": "",
              "tags": [],
              "id": "#render/fallback/dist",
              "default": {},
              "type": "any"
            },
            "static": {
              "title": "For all other routes (`/*`). Disable by setting to `false`.",
              "description": "",
              "tags": [],
              "id": "#render/fallback/static",
              "properties": {
                "skipUnknown": {
                  "type": "boolean",
                  "id": "#render/fallback/static/skipUnknown",
                  "default": true
                },
                "handlers": {
                  "id": "#render/fallback/static/handlers",
                  "properties": {
                    ".htm": {
                      "type": "boolean",
                      "id": "#render/fallback/static/handlers//htm",
                      "default": false
                    },
                    ".html": {
                      "type": "boolean",
                      "id": "#render/fallback/static/handlers//html",
                      "default": false
                    }
                  },
                  "default": {
                    "": {
                      "htm": false,
                      "html": false
                    }
                  },
                  "type": "object"
                }
              },
              "default": {
                "skipUnknown": true,
                "handlers": {
                  "": {
                    "htm": false,
                    "html": false
                  }
                }
              },
              "type": "object"
            }
          },
          "default": {
            "dist": {},
            "static": {
              "skipUnknown": true,
              "handlers": {
                "": {
                  "htm": false,
                  "html": false
                }
              }
            }
          },
          "type": "object"
        }
      },
      "default": {
        "ssr": {},
        "bundleRenderer": {
          "runInNewContext": {}
        },
        "crossorigin": {},
        "resourceHints": true,
        "ssrLog": false,
        "http2": {
          "push": false,
          "shouldPush": null,
          "pushAssets": null
        },
        "static": {
          "prefix": true
        },
        "compressor": {
          "threshold": 0
        },
        "etag": {
          "hash": false,
          "weak": false
        },
        "csp": false,
        "dist": {
          "index": false,
          "maxAge": "1y"
        },
        "fallback": {
          "dist": {},
          "static": {
            "skipUnknown": true,
            "handlers": {
              "": {
                "htm": false,
                "html": false
              }
            }
          }
        }
      },
      "type": "object"
    },
    "router": {
      "id": "#router",
      "properties": {
        "mode": {
          "title": "Configure the router mode.",
          "description": "For server-side rendering it is not recommended to change it.",
          "tags": [],
          "id": "#router/mode",
          "default": "history",
          "type": "string"
        },
        "base": {
          "title": "The base URL of the app. For example, if the entire single page application is served under `/app/`, then base should use the value `'/app/'`.",
          "description": "This can be useful if you need to serve Nuxt as a different context root, from within a bigger web site.",
          "tags": [],
          "id": "#router/base",
          "default": "/",
          "type": "string"
        },
        "_routerBaseSpecified": {
          "title": "",
          "description": "",
          "tags": [
            "@private"
          ],
          "id": "#router/_routerBaseSpecified",
          "default": true,
          "type": "boolean"
        },
        "routes": {
          "type": "array",
          "id": "#router/routes",
          "default": [],
          "items": {
            "type": "any"
          }
        },
        "routeNameSplitter": {
          "title": "This allows changing the separator between route names that Nuxt uses.",
          "description": "Imagine we have the page file `pages/posts/_id.vue`. Nuxt will generate the route name programmatically, in this case `posts-id`. If you change the routeNameSplitter config to `/` the name will change to `posts/id`.",
          "tags": [],
          "id": "#router/routeNameSplitter",
          "default": "-",
          "type": "string"
        },
        "middleware": {
          "title": "Set the default(s) middleware for every page of the application.",
          "description": "",
          "tags": [],
          "id": "#router/middleware",
          "default": [],
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "linkActiveClass": {
          "title": "Globally configure `<nuxt-link>` default active class.",
          "description": "",
          "tags": [],
          "id": "#router/linkActiveClass",
          "default": "nuxt-link-active",
          "type": "string"
        },
        "linkExactActiveClass": {
          "title": "Globally configure `<nuxt-link>` default exact active class.",
          "description": "",
          "tags": [],
          "id": "#router/linkExactActiveClass",
          "default": "nuxt-link-exact-active",
          "type": "string"
        },
        "linkPrefetchedClass": {
          "title": "Globally configure `<nuxt-link>` default prefetch class (feature disabled by default).",
          "description": "",
          "tags": [],
          "id": "#router/linkPrefetchedClass",
          "default": false,
          "type": "boolean"
        },
        "extendRoutes": {
          "title": "You can pass a function to extend the routes created by Nuxt.",
          "description": "",
          "tags": [
            "@example\n```js\nimport { fileURLToPath } from 'url'\nexport default {\n  router: {\n    extendRoutes(routes, resolve) {\n      routes.push({\n        name: 'custom',\n        path: '*',\n        component: fileURLToPath(new URL('./pages/404.vue', import.meta.url))\n      })\n    }\n  }\n}\n```"
          ],
          "id": "#router/extendRoutes",
          "default": null,
          "type": "any"
        },
        "scrollBehavior": {
          "deprecated": "router.scrollBehavior` property is deprecated in favor of using `~/app/router.scrollBehavior.js` file, learn more: https://nuxtjs.org/api/configuration-router#scrollbehavior",
          "title": "The `scrollBehavior` option lets you define a custom behavior for the scroll position between the routes. This method is called every time a page is rendered. To learn more about it, see the `vue-router` documentation.",
          "description": "",
          "tags": [
            "@see [vue-router `scrollBehavior` documentation](https://router.vuejs.org/guide/advanced/scroll-behavior.html)."
          ],
          "id": "#router/scrollBehavior",
          "default": {},
          "type": "any"
        },
        "parseQuery": {
          "title": "Provide custom query string parse function. Overrides the default.",
          "description": "",
          "tags": [],
          "id": "#router/parseQuery",
          "default": false,
          "type": "boolean"
        },
        "stringifyQuery": {
          "title": "Provide custom query string stringify function. Overrides the default.",
          "description": "",
          "tags": [],
          "id": "#router/stringifyQuery",
          "default": false,
          "type": "boolean"
        },
        "fallback": {
          "title": "Controls whether the router should fall back to hash mode when the browser does not support history.pushState, but mode is set to history.",
          "description": "Setting this to `false` essentially makes every router-link navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.",
          "tags": [],
          "id": "#router/fallback",
          "default": false,
          "type": "boolean"
        },
        "prefetchLinks": {
          "title": "Configure `<nuxt-link>` to prefetch the code-splitted page when detected within the viewport. Requires [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) to be supported (see [Caniuse](https://caniuse.com/intersectionobserver)).",
          "description": "",
          "tags": [],
          "id": "#router/prefetchLinks",
          "default": true,
          "type": "boolean"
        },
        "prefetchPayloads": {
          "title": "When using `nuxt generate` with target: 'static', Nuxt will generate a payload.js for each page.",
          "description": "With this option enabled, Nuxt will automatically prefetch the payload of the linked page when the `<nuxt-link>` is visible in the viewport, making instant navigation.",
          "tags": [],
          "id": "#router/prefetchPayloads",
          "default": true,
          "type": "boolean"
        },
        "trailingSlash": {
          "title": "If this option is set to `true`, trailing slashes will be appended to every route. If set to `false`, they'll be removed.",
          "description": "",
          "tags": [
            "@warning This option should not be set without preparation and has to\nbe tested thoroughly. When setting `trailingSlash` to something else than\n`undefined`, the opposite route will stop working. Thus, 301 redirects should\nbe in place and your internal linking has to be adapted correctly. If you set\n`trailingSlash` to `true`, then only `example.com/abc/` will work, but not\n`example.com/abc`. On `false`, it's vice-versa."
          ],
          "id": "#router/trailingSlash",
          "default": {},
          "type": "any"
        }
      },
      "default": {
        "mode": "history",
        "base": "/",
        "_routerBaseSpecified": true,
        "routes": [],
        "routeNameSplitter": "-",
        "middleware": [],
        "linkActiveClass": "nuxt-link-active",
        "linkExactActiveClass": "nuxt-link-exact-active",
        "linkPrefetchedClass": false,
        "extendRoutes": null,
        "scrollBehavior": {},
        "parseQuery": false,
        "stringifyQuery": false,
        "fallback": false,
        "prefetchLinks": true,
        "prefetchPayloads": true,
        "trailingSlash": {}
      },
      "type": "object"
    },
    "server": {
      "id": "#server",
      "properties": {
        "https": {
          "title": "Whether to enable HTTPS.",
          "description": "",
          "tags": [
            "@example\n```\nimport { fileURLToPath } from 'node:url'\nexport default {\n  server: {\n    https: {\n      key: fs.readFileSync(fileURLToPath(new URL('./server.key', import.meta.url))),\n      cert: fs.readFileSync(fileURLToPath(new URL('./server.crt', import.meta.url)))\n    }\n  }\n}\n```"
          ],
          "tsType": "false | { key: string; cert: string }",
          "id": "#server/https",
          "default": false,
          "type": "boolean"
        },
        "port": {
          "type": "number",
          "id": "#server/port",
          "default": 3000
        },
        "host": {
          "type": "string",
          "id": "#server/host",
          "default": "localhost"
        },
        "socket": {
          "id": "#server/socket"
        },
        "timing": {
          "title": "Enabling timing adds a middleware to measure the time elapsed during server-side rendering and adds it to the headers as 'Server-Timing'.",
          "description": "Apart from true/false, this can be an object for providing options. Currently, only `total` is supported (which directly tracks the whole time spent on server-side rendering.",
          "tags": [],
          "id": "#server/timing",
          "type": "function"
        }
      },
      "default": {
        "https": false,
        "port": 3000,
        "host": "localhost"
      },
      "type": "object"
    }
  },
  "default": {
    "vue": {
      "config": {
        "silent": true,
        "performance": {}
      }
    },
    "app": {
      "baseURL": "/",
      "buildAssetsDir": "/_nuxt/",
      "assetsPath": {},
      "head": {
        "meta": [
          {
            "name": "viewport",
            "content": "width=device-width, initial-scale=1"
          },
          {
            "charset": "utf-8"
          }
        ],
        "link": [],
        "style": [],
        "script": [],
        "noscript": []
      }
    },
    "appTemplatePath": "/home/runner/work/bridge/bridge/packages/bridge-schema/views/app.template.html",
    "store": false,
    "vueMeta": null,
    "head": {
      "meta": [],
      "link": [],
      "style": [],
      "script": []
    },
    "meta": {
      "meta": [],
      "link": [],
      "style": [],
      "script": []
    },
    "fetch": {
      "server": true,
      "client": true
    },
    "extendPlugins": null,
    "layouts": {},
    "ErrorPage": null,
    "loading": {
      "color": "black",
      "failedColor": "red",
      "height": "2px",
      "throttle": 200,
      "duration": 5000,
      "continuous": false,
      "rtl": false,
      "css": true
    },
    "loadingIndicator": {
      "name": "default",
      "color": "black",
      "color2": "#F5F5F5",
      "background": "white",
      "loading": "Loading..."
    },
    "pageTransition": {
      "name": "page",
      "mode": "out-in",
      "appear": false,
      "appearClass": "appear",
      "appearActiveClass": "appear-active",
      "appearToClass": "appear-to"
    },
    "layoutTransition": {
      "name": "layout",
      "mode": "out-in"
    },
    "features": {
      "store": true,
      "layouts": true,
      "meta": true,
      "middleware": true,
      "transitions": true,
      "deprecations": true,
      "validate": true,
      "useAsyncData": true,
      "fetch": true,
      "clientOnline": true,
      "clientPrefetch": true,
      "componentAliases": true,
      "componentClientOnly": true
    },
    "build": {
      "quiet": true,
      "analyze": false,
      "profile": false,
      "extractCSS": false,
      "cssSourceMap": {},
      "ssr": {},
      "parallel": false,
      "cache": false,
      "standalone": false,
      "publicPath": {},
      "serverURLPolyfill": "url",
      "filenames": {},
      "loaders": {
        "file": {
          "esModule": false
        },
        "fontUrl": {
          "esModule": false,
          "limit": 1000
        },
        "imgUrl": {
          "esModule": false,
          "limit": 1000
        },
        "pugPlain": {},
        "vue": {
          "productionMode": true,
          "transformAssetUrls": {
            "video": "src",
            "source": "src",
            "object": "src",
            "embed": "src"
          },
          "compilerOptions": {}
        },
        "css": {
          "importLoaders": 0,
          "esModule": false,
          "sourcemap": true
        },
        "cssModules": {
          "importLoaders": 0,
          "esModule": false,
          "modules": {
            "localIdentName": "[local]_[hash:base64:5]"
          },
          "sourcemap": true
        },
        "less": {
          "sourcemap": true
        },
        "sass": {
          "sassOptions": {
            "indentedSyntax": true
          },
          "sourcemap": true
        },
        "scss": {
          "sourcemap": true
        },
        "stylus": {
          "sourcemap": true
        },
        "vueStyle": {
          "sourcemap": true
        }
      },
      "styleResources": {},
      "plugins": [],
      "terser": {},
      "hardSource": false,
      "aggressiveCodeRemoval": false,
      "optimizeCSS": false,
      "optimization": {
        "runtimeChunk": "single",
        "minimize": true,
        "minimizer": {},
        "splitChunks": {
          "chunks": "all",
          "automaticNameDelimiter": "/",
          "cacheGroups": {}
        }
      },
      "splitChunks": {
        "layouts": false,
        "pages": true,
        "commons": true
      },
      "corejs": "auto",
      "babel": {
        "configFile": false,
        "babelrc": false,
        "plugins": [],
        "presets": {},
        "cacheDirectory": {}
      },
      "postcss": {
        "postcssOptions": {},
        "order": ""
      },
      "html": {
        "minify": {
          "collapseBooleanAttributes": true,
          "decodeEntities": true,
          "minifyCSS": true,
          "minifyJS": true,
          "processConditionalComments": true,
          "removeEmptyAttributes": true,
          "removeRedundantAttributes": true,
          "trimCustomFragments": true,
          "useShortDoctype": true
        }
      },
      "template": {},
      "watch": [],
      "devMiddleware": {
        "stats": "none"
      },
      "hotMiddleware": {},
      "vendor": {
        "$meta": {
          "deprecated": "vendor has been deprecated since nuxt 2"
        }
      },
      "stats": false,
      "friendlyErrors": true,
      "additionalExtensions": [],
      "warningIgnoreFilters": [],
      "followSymlinks": false
    },
    "cli": {
      "badgeMessages": [],
      "bannerColor": "green"
    },
    "watch": [],
    "styleExtensions": [
      ".css",
      ".pcss",
      ".postcss",
      ".styl",
      ".stylus",
      ".scss",
      ".sass",
      ".less"
    ],
    "dir": {
      "store": "store",
      "assets": "assets",
      "app": "app",
      "globalName": "nuxt",
      "modern": {},
      "mode": "universal",
      "env": {},
      "target": "server",
      "globals": {}
    },
    "serverMiddleware": [],
    "generate": {
      "dir": "/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
      "concurrency": 500,
      "interval": 0,
      "subFolders": true,
      "fallback": "200.html",
      "crawler": true,
      "manifest": true,
      "nojekyll": true,
      "cache": {
        "ignore": [],
        "globbyOptions": {
          "gitignore": true
        }
      },
      "staticAssets": {
        "dir": "static",
        "base": "/_nuxt/home/runner/work/bridge/bridge/packages/bridge-schema/dist",
        "versionBase": "",
        "version": "1692047426"
      }
    },
    "messages": {
      "loading": "Loading...",
      "error_404": "This page could not be found",
      "server_error": "Server error",
      "nuxtjs": "Nuxt",
      "back_to_home": "Back to the home page",
      "server_error_details": "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
      "client_error": "Error",
      "client_error_details": "An error occurred while rendering the page. Check developer tools console for details."
    },
    "render": {
      "ssr": {},
      "bundleRenderer": {
        "runInNewContext": {}
      },
      "crossorigin": {},
      "resourceHints": true,
      "ssrLog": false,
      "http2": {
        "push": false,
        "shouldPush": null,
        "pushAssets": null
      },
      "static": {
        "prefix": true
      },
      "compressor": {
        "threshold": 0
      },
      "etag": {
        "hash": false,
        "weak": false
      },
      "csp": false,
      "dist": {
        "index": false,
        "maxAge": "1y"
      },
      "fallback": {
        "dist": {},
        "static": {
          "skipUnknown": true,
          "handlers": {
            "": {
              "htm": false,
              "html": false
            }
          }
        }
      }
    },
    "router": {
      "mode": "history",
      "base": "/",
      "_routerBaseSpecified": true,
      "routes": [],
      "routeNameSplitter": "-",
      "middleware": [],
      "linkActiveClass": "nuxt-link-active",
      "linkExactActiveClass": "nuxt-link-exact-active",
      "linkPrefetchedClass": false,
      "extendRoutes": null,
      "scrollBehavior": {},
      "parseQuery": false,
      "stringifyQuery": false,
      "fallback": false,
      "prefetchLinks": true,
      "prefetchPayloads": true,
      "trailingSlash": {}
    },
    "server": {
      "https": false,
      "port": 3000,
      "host": "localhost"
    }
  },
  "type": "object"
}