import { VueConfiguration } from 'vue/types/vue';
import { Head, MergeHead } from '@unhead/schema';
import { VueMetaOptions, MetaInfo } from 'vue-meta';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import { PluginVisualizerOptions } from 'rollup-plugin-visualizer';
import { PluginOptions } from 'extract-css-chunks-webpack-plugin';
import * as vue_router from 'vue-router';
import { Route } from 'vue-router';
import { IncomingMessage as IncomingMessage$1, ServerResponse } from 'node:http';
import { VueConstructor, ComponentOptions } from 'vue';
import { Hookable } from 'hookable';
import * as untyped_dist_types_a20127ea from 'untyped/dist/types-a20127ea';

/** @deprecated Extend types from `@unhead/schema` directly. This may be removed in a future minor version. */
interface HeadAugmentations extends MergeHead {
    base?: {};
    link?: {};
    meta?: {};
    style?: {};
    script?: {};
    noscript?: {};
    htmlAttrs?: {};
    bodyAttrs?: {};
}
type MetaObjectRaw = Head<HeadAugmentations>;
type AppHeadMetaObject = MetaObjectRaw & {
    /**
     * The character encoding in which the document is encoded => `<meta charset="<value>" />`
     * @default `'utf-8'`
     */
    charset?: string;
    /**
     * Configuration of the viewport (the area of the window in which web content can be seen),
     * mapped to => `<meta name="viewport" content="<value>" />`
     * @default `'width=device-width, initial-scale=1'`
     */
    viewport?: string;
};

interface ConfigSchema {
 vue: {
  /**
   * Properties that will be set directly on `Vue.config` for vue@2.
   * 
   * 
   * @see [vue@2 Documentation](https://v2.vuejs.org/v2/api/#Global-Config)
  */
  config: VueConfiguration,
 },

 app: {
  /**
   * The base path of your Nuxt application.
   * 
   * This can be set at runtime by setting the NUXT_APP_BASE_URL environment variable.
   * 
   * @default "/"
   * 
   * @example
   * ```bash
   * NUXT_APP_BASE_URL=/prefix/ node .output/server/index.mjs
   * ```
  */
  baseURL: string,

  /**
   * The folder name for the built site assets, relative to `baseURL` (or `cdnURL` if set). This is set at build time and should not be customized at runtime.
   * 
   * @default "/_nuxt/"
  */
  buildAssetsDir: string,

  /**
   * The folder name for the built site assets, relative to `baseURL` (or `cdnURL` if set).
   * 
   * 
   * @deprecated - use `buildAssetsDir` instead
  */
  assetsPath: any,

  /**
   * Set default configuration for `<head>` on every page.
   * 
   * 
   * @example
   * ```js
   * app: {
   *   head: {
   *     meta: [
   *       // <meta name="viewport" content="width=device-width, initial-scale=1">
   *       { name: 'viewport', content: 'width=device-width, initial-scale=1' }
   *     ],
   *     script: [
   *       // <script src="https://myawesome-lib.js"></script>
   *       { src: 'https://awesome-lib.js' }
   *     ],
   *     link: [
   *       // <link rel="stylesheet" href="https://myawesome-lib.css">
   *       { rel: 'stylesheet', href: 'https://awesome-lib.css' }
   *     ],
   *     // please note that this is an area that is likely to change
   *     style: [
   *       // <style type="text/css">:root { color: red }</style>
   *       { children: ':root { color: red }', type: 'text/css' }
   *     ],
   *     noscript: [
   *       // <noscript>JavaScript is required</noscript>
   *       { children: 'JavaScript is required' }
   *     ]
   *   }
   * }
   * ```
  */
  head: AppHeadMetaObject,
 },

 /**
  * The path to an HTML template file for rendering Nuxt responses. Uses `<srcDir>/app.html` if it exists, or the Nuxt's default template if not.
  * 
  * @default "/home/runner/work/bridge/bridge/packages/bridge-schema/views/app.template.html"
  * 
  * @example
  * ```html
  * <!DOCTYPE html>
  * <html {{ HTML_ATTRS }}>
  *   <head {{ HEAD_ATTRS }}>
  *     {{ HEAD }}
  *   </head>
  *   <body {{ BODY_ATTRS }}>
  *     {{ APP }}
  *   </body>
  * </html>
  * ```
 */
 appTemplatePath: string,

 /**
  * Enable or disable Vuex store.
  * 
  * By default, it is enabled if there is a `store/` directory.
  * 
  * @default false
 */
 store: boolean,

 /**
  * Options to pass directly to `vue-meta`.
  * 
  * 
  * @see [documentation](https://vue-meta.nuxtjs.org/api/#plugin-options).
 */
 vueMeta: VueMetaOptions,

 /**
  * Set default configuration for `<head>` on every page.
  * 
  * 
  * @see [documentation](https://vue-meta.nuxtjs.org/api/#metainfo-properties) for specifics.
 */
 head: MetaInfo,

 /**
  * 
  * @deprecated - use `head` instead
 */
 meta: {
  meta: Array<any>,

  link: Array<any>,

  style: Array<any>,

  script: Array<any>,
 },

 /**
  * Configuration for the Nuxt `fetch()` hook.
  * 
 */
 fetch: {
  /**
   * Whether to enable `fetch()` on the server.
   * 
   * @default true
  */
  server: boolean,

  /**
   * Whether to enable `fetch()` on the client.
   * 
   * @default true
  */
  client: boolean,
 },

 /**
  * You may want to extend plugins or change their order. For this, you can pass a function using `extendPlugins`. It accepts an array of plugin objects and should return an array of plugin objects.
  * 
 */
 extendPlugins: (plugins: Array<{ src: string, mode?: 'client' | 'server' }>) => Array<{ src: string, mode?: 'client' | 'server' }>,

 /**
  * An object where each key name maps to a path to a layout .vue file.
  * 
  * Normally, there is no need to configure this directly.
  * 
 */
 layouts: Record<string, string>,

 /**
  * Set a custom error page layout.
  * 
  * Normally, there is no need to configure this directly.
  * 
  * @default null
 */
 ErrorPage: string,

 /**
  * Configure the Nuxt loading progress bar component that's shown between routes. Set to `false` to disable. You can also customize it or create your own component.
  * 
 */
 loading: {
  /**
   * CSS color of the progress bar.
   * 
   * @default "black"
  */
  color: string,

  /**
   * CSS color of the progress bar when an error appended while rendering the route (if data or fetch sent back an error, for example).
   * 
   * @default "red"
  */
  failedColor: string,

  /**
   * Height of the progress bar (used in the style property of the progress bar).
   * 
   * @default "2px"
  */
  height: string,

  /**
   * In ms, wait for the specified time before displaying the progress bar. Useful for preventing the bar from flashing.
   * 
   * @default 200
  */
  throttle: number,

  /**
   * In ms, the maximum duration of the progress bar, Nuxt assumes that the route will be rendered before 5 seconds.
   * 
   * @default 5000
  */
  duration: number,

  /**
   * Keep animating progress bar when loading takes longer than duration.
   * 
   * @default false
  */
  continuous: boolean,

  /**
   * Set the direction of the progress bar from right to left.
   * 
   * @default false
  */
  rtl: boolean,

  /**
   * Set to `false` to remove default progress bar styles (and add your own).
   * 
   * @default true
  */
  css: boolean,
 },

 /**
  * Show a loading spinner while the page is loading (only when `ssr: false`).
  * 
  * Set to `false` to disable. Alternatively, you can pass a string name or an object for more configuration. The name can refer to an indicator from [SpinKit](https://tobiasahlin.com/spinkit/) or a path to an HTML template of the indicator source code (in this case, all the other options will be passed to the template).
  * 
 */
 loadingIndicator: {
  [key: string]: any
 },

 /**
  * Used to set the default properties of the page transitions.
  * 
  * You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your pages.
  * 
  * 
  * @see [vue@2 documentation](https://v2.vuejs.org/v2/guide/transitions.html)
  * 
  * @see [vue@3 documentation](https://vuejs.org/guide/built-ins/transition-group.html#enter-leave-transitions)
 */
 pageTransition: {
  [key: string]: any
 },

 /**
  * Used to set the default properties of the layout transitions.
  * 
  * You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your layouts.
  * 
  * 
  * @see [vue@2 documentation](https://v2.vuejs.org/v2/guide/transitions.html)
 */
 layoutTransition: {
  [key: string]: any
 },

 /**
  * You can disable specific Nuxt features that you do not want.
  * 
 */
 features: {
  /**
   * Set to false to disable Nuxt vuex integration
   * 
   * @default true
  */
  store: boolean,

  /**
   * Set to false to disable layouts
   * 
   * @default true
  */
  layouts: boolean,

  /**
   * Set to false to disable Nuxt integration with `vue-meta` and the `head` property
   * 
   * @default true
  */
  meta: boolean,

  /**
   * Set to false to disable middleware
   * 
   * @default true
  */
  middleware: boolean,

  /**
   * Set to false to disable transitions
   * 
   * @default true
  */
  transitions: boolean,

  /**
   * Set to false to disable support for deprecated features and aliases
   * 
   * @default true
  */
  deprecations: boolean,

  /**
   * Set to false to disable the Nuxt `validate()` hook
   * 
   * @default true
  */
  validate: boolean,

  /**
   * Set to false to disable the Nuxt `asyncData()` hook
   * 
   * @default true
  */
  useAsyncData: boolean,

  /**
   * Set to false to disable the Nuxt `fetch()` hook
   * 
   * @default true
  */
  fetch: boolean,

  /**
   * Set to false to disable `$nuxt.isOnline`
   * 
   * @default true
  */
  clientOnline: boolean,

  /**
   * Set to false to disable prefetching behavior in `<NuxtLink>`
   * 
   * @default true
  */
  clientPrefetch: boolean,

  /**
   * Set to false to disable extra component aliases like `<NLink>` and `<NChild>`
   * 
   * @default true
  */
  componentAliases: boolean,

  /**
   * Set to false to disable the `<ClientOnly>` component (see [docs](https://github.com/egoist/vue-client-only))
   * 
   * @default true
  */
  componentClientOnly: boolean,
 },

 build: {
  /**
   * Suppresses most of the build output log.
   * 
   * It is enabled by default when a CI or test environment is detected.
   * 
   * @default true
   * 
   * @see [std-env](https://github.com/unjs/std-env)
  */
  quiet: boolean,

  /**
   * Nuxt uses `webpack-bundle-analyzer` to visualize your bundles and how to optimize them.
   * 
   * Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).
   * 
   * @default false
   * 
   * @example
   * ```js
   * analyze: {
   *   analyzerMode: 'static'
   * }
   * ```
  */
  analyze: boolean | BundleAnalyzerPlugin.Options | PluginVisualizerOptions,

  /**
   * Enable the profiler in webpackbar.
   * 
   * It is normally enabled by CLI argument `--profile`.
   * 
   * @default false
   * 
   * @see [webpackbar](https://github.com/unjs/webpackbar#profile)
  */
  profile: boolean,

  /**
   * Enables Common CSS Extraction using [Vue Server Renderer guidelines](https://v2.ssr.vuejs.org/guide/css.html).
   * 
   * Using [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin/) under the hood, your CSS will be extracted into separate files, usually one per component. This allows caching your CSS and JavaScript separately and is worth trying if you have a lot of global or shared CSS.
   * 
   * @default false
   * 
   * @example
   * ```js
   * export default {
   *   build: {
   *     extractCSS: true,
   *     // or
   *     extractCSS: {
   *       ignoreOrder: true
   *     }
   *   }
   * }
   * ```
   * 
   * If you want to extract all your CSS to a single file, there is a workaround for this.
   * However, note that it is not recommended to extract everything into a single file.
   * Extracting into multiple CSS files is better for caching and preload isolation. It
   * can also improve page performance by downloading and resolving only those resources
   * that are needed.
   * 
   * @example
   * ```js
   * export default {
   *   build: {
   *     extractCSS: true,
   *     optimization: {
   *       splitChunks: {
   *         cacheGroups: {
   *           styles: {
   *             name: 'styles',
   *             test: /\.(css|vue)$/,
   *             chunks: 'all',
   *             enforce: true
   *           }
   *         }
   *       }
   *     }
   *   }
   * }
   * ```
  */
  extractCSS: boolean | PluginOptions,

  /**
   * Enables CSS source map support (defaults to true in development)
   * 
  */
  cssSourceMap: any,

  /**
   * Creates special webpack bundle for SSR renderer. It is normally not necessary to change this value.
   * 
  */
  ssr: any,

  /**
   * Enable [thread-loader](https://github.com/webpack-contrib/thread-loader#thread-loader) when building app with webpack.
   * 
   * @default false
   * 
   * @warning This is an unstable feature.
  */
  parallel: boolean,

  /**
   * Enable caching for [`terser-webpack-plugin`](https://github.com/webpack-contrib/terser-webpack-plugin#options) and [`cache-loader`](https://github.com/webpack-contrib/cache-loader#cache-loader).
   * 
   * @default false
   * 
   * @warning This is an unstable feature.
  */
  cache: boolean,

  /**
   * Inline server bundle dependencies.
   * 
   * This mode bundles `node_modules` that are normally preserved as externals in the server build.
   * 
   * @default false
   * 
   * @warning Runtime dependencies (modules, `nuxt.config`, server middleware and the static directory) are not bundled.
   * This feature only disables use of [webpack-externals](https://webpack.js.org/configuration/externals/) for server-bundle.
   * 
   * @note You can enable standalone bundling by passing `--standalone` via the command line.
   * 
   * @see [context](https://github.com/nuxt/nuxt.js/pull/4661)
  */
  standalone: boolean,

  /**
   * If you are uploading your dist files to a CDN, you can set the publicPath to your CDN.
   * 
   * 
   * @note This is only applied in production.
   * 
   * The value of this property at runtime will override the configuration of an app that
   * has already been built.
   * 
   * @example
   * ```js
   * build: {
   *   publicPath: process.env.PUBLIC_PATH || 'https://cdn.nuxtjs.org'
   * }
   * ```
  */
  publicPath: any,

  /**
   * The polyfill library to load to provide URL and URLSearchParams.
   * 
   * Defaults to `'url'` ([see package](https://www.npmjs.com/package/url)).
   * 
   * @default "url"
  */
  serverURLPolyfill: string,

  /**
   * Customize bundle filenames.
   * 
   * To understand a bit more about the use of manifests, take a look at [this webpack documentation](https://webpack.js.org/guides/code-splitting/).
   * 
   * 
   * @note Be careful when using non-hashed based filenames in production
   * as most browsers will cache the asset and not detect the changes on first load.
   * 
   * This example changes fancy chunk names to numerical ids:
   * 
   * @example
   * ```js
   * filenames: {
   *   chunk: ({ isDev }) => (isDev ? '[name].js' : '[id].[contenthash].js')
   * }
   * ```
  */
  filenames: Record<string, ((arg: any) => string)>,

  /**
   * Customize the options of Nuxt's integrated webpack loaders.
   * 
  */
  loaders: {
   file: {
    /** @default false */
    esModule: boolean,
   },

   fontUrl: {
    /** @default false */
    esModule: boolean,

    /** @default 1000 */
    limit: number,
   },

   imgUrl: {
    /** @default false */
    esModule: boolean,

    /** @default 1000 */
    limit: number,
   },

   pugPlain: any,

   vue: {
    /** @default true */
    productionMode: boolean,

    transformAssetUrls: {
     /** @default "src" */
     video: string,

     /** @default "src" */
     source: string,

     /** @default "src" */
     object: string,

     /** @default "src" */
     embed: string,
    },

    compilerOptions: any,
   },

   css: {
    /** @default 0 */
    importLoaders: number,

    /** @default false */
    esModule: boolean,
   },

   cssModules: {
    /** @default 0 */
    importLoaders: number,

    /** @default false */
    esModule: boolean,

    modules: {
     /** @default "[local]_[hash:base64:5]" */
     localIdentName: string,
    },
   },

   less: any,

   sass: {
    sassOptions: {
     /** @default true */
     indentedSyntax: boolean,
    },
   },

   scss: any,

   stylus: any,

   vueStyle: any,
  },

  /**
   * 
   * @deprecated  Use [style-resources-module](https://github.com/nuxt-community/style-resources-module/)
  */
  styleResources: any,

  /**
   * Add webpack plugins.
   * 
   * 
   * @example
   * ```js
   * import webpack from 'webpack'
   * import { version } from './package.json'
   * // ...
   * plugins: [
   *   new webpack.DefinePlugin({
   *     'process.VERSION': version
   *   })
   * ]
   * ```
  */
  plugins: Array<any>,

  /**
   * Terser plugin options.
   * 
   * Set to false to disable this plugin, or pass an object of options.
   * 
   * 
   * @see [terser-webpack-plugin documentation](https://github.com/webpack-contrib/terser-webpack-plugin)
   * 
   * @note Enabling sourcemap will leave `//# sourcemappingURL` linking comment at
   * the end of each output file if webpack `config.devtool` is set to `source-map`.
  */
  terser: any,

  /**
   * Enables the [HardSourceWebpackPlugin](https://github.com/mzgoddard/hard-source-webpack-plugin) for improved caching.
   * 
   * @default false
   * 
   * @warning unstable
  */
  hardSource: boolean,

  /**
   * Hard-replaces `typeof process`, `typeof window` and `typeof document` to tree-shake bundle.
   * 
   * @default false
  */
  aggressiveCodeRemoval: boolean,

  /**
   * OptimizeCSSAssets plugin options.
   * 
   * Defaults to true when `extractCSS` is enabled.
   * 
   * @default false
   * 
   * @see [optimize-css-assets-webpack-plugin documentation](https://github.com/NMFR/optimize-css-assets-webpack-plugin).
  */
  optimizeCSS: boolean,

  /**
   * Configure [webpack optimization](https://webpack.js.org/configuration/optimization/).
   * 
  */
  optimization: {
   /** @default "single" */
   runtimeChunk: string,

   /**
    * Set minimize to false to disable all minimizers. (It is disabled in development by default)
    * 
    * @default true
   */
   minimize: boolean,

   /**
    * You can set minimizer to a customized array of plugins.
    * 
   */
   minimizer: any,

   splitChunks: {
    /** @default "all" */
    chunks: string,

    /** @default "/" */
    automaticNameDelimiter: string,

    cacheGroups: any,
   },
  },

  /**
   * Whether to split code for `layout`, `pages` and `commons` chunks.
   * 
   * Commons libs include `vue`, `vue-loader`, `vue-router`, `vuex`, etc.
   * 
  */
  splitChunks: {
   /** @default false */
   layouts: boolean,

   /** @default true */
   pages: boolean,

   /** @default true */
   commons: boolean,
  },

  /**
   * Nuxt will automatically detect the current version of `core-js` in your project (`'auto'`), or you can specify which version you want to use (`2` or `3`).
   * 
   * @default "auto"
  */
  corejs: string,

  /**
   * Customize your Babel configuration.
   * 
   * See [babel-loader options](https://github.com/babel/babel-loader#options) and [babel options](https://babeljs.io/docs/en/options).
   * 
   * 
   * @note `.babelrc` is ignored by default.
  */
  babel: {
   /** @default false */
   configFile: boolean,

   /** @default false */
   babelrc: boolean,

   /**
    * An array of Babel plugins to load, or a function that takes webpack context and returns an array of Babel plugins.
    * 
    * For more information see [Babel plugins options](https://babeljs.io/docs/en/options#plugins) and [babel-loader options](https://github.com/babel/babel-loader#options).
    * 
   */
   plugins: Array<any>,

   /**
    * The Babel presets to be applied.
    * 
    * 
    * @note The presets configured here will be applied to both the client and the server
    * build. The target will be set by Nuxt accordingly (client/server). If you want to configure
    * the preset differently for the client or the server build, please use presets as a function.
    * 
    * @warning It is highly recommended to use the default preset instead customizing.
    * 
    * @example
    * ```js
    * export default {
    *   build: {
    *     babel: {
    *       presets({ isServer }, [ preset, options ]) {
    *         // change options directly
    *         options.targets = isServer ? '...' :  '...'
    *         options.corejs = '...'
    *         // return nothing
    *       }
    *     }
    *   }
    * }
    * ```
    * 
    * @example
    * ```js
    * export default {
    *   build: {
    *     babel: {
    *       presets({ isServer }, [preset, options]) {
    *         return [
    *           [
    *             preset,
    *             {
    *               targets: isServer ? '...' :  '...',
    *               ...options
    *             }
    *           ],
    *           [
    *             // Other presets
    *           ]
    *         ]
    *       }
    *     }
    *   }
    * }
    * ```
   */
   presets: any,

   cacheDirectory: any,
  },

  /**
   * Customize PostCSS Loader plugins. Sames options as https://github.com/webpack-contrib/postcss-loader#options
   * 
  */
  postcss: {
   execute: any,

   postcssOptions: {
    [key: string]: any
   },

   sourcemap: any,

   implementation: any,

   /** @default "" */
   order: string,
  },

  html: {
   /**
    * Configuration for the html-minifier plugin used to minify HTML files created during the build process (will be applied for all modes).
    * 
    * 
    * @warning If you make changes, they won't be merged with the defaults!
    * 
    * @example
    * ```js
    * export default {
    *   html: {
    *     minify: {
    *       collapseBooleanAttributes: true,
    *       decodeEntities: true,
    *       minifyCSS: true,
    *       minifyJS: true,
    *       processConditionalComments: true,
    *       removeEmptyAttributes: true,
    *       removeRedundantAttributes: true,
    *       trimCustomFragments: true,
    *       useShortDoctype: true
    *     }
    *   }
    * }
    * ```
   */
   minify: {
    /** @default true */
    collapseBooleanAttributes: boolean,

    /** @default true */
    decodeEntities: boolean,

    /** @default true */
    minifyCSS: boolean,

    /** @default true */
    minifyJS: boolean,

    /** @default true */
    processConditionalComments: boolean,

    /** @default true */
    removeEmptyAttributes: boolean,

    /** @default true */
    removeRedundantAttributes: boolean,

    /** @default true */
    trimCustomFragments: boolean,

    /** @default true */
    useShortDoctype: boolean,
   },
  },

  /**
   * Allows setting a different app template (other than `@nuxt/vue-app`)
   * 
  */
  template: any,

  /**
   * You can provide your custom files to watch and regenerate after changes.
   * 
   * This feature is especially useful for using with modules.
   * 
   * 
   * @example
   * ```js
   *       watch: ['~/.nuxt/support.js']
   * ```
  */
  watch: Array<any>,

  /**
   * See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.
   * 
  */
  devMiddleware: {
   /** @default "none" */
   stats: string,
  },

  /**
   * See [webpack-hot-middleware](https://github.com/webpack-contrib/webpack-hot-middleware) for available options.
   * 
  */
  hotMiddleware: any,

  vendor: {
   "$meta": {
    /** @default "vendor has been deprecated since nuxt 2" */
    deprecated: string,
   },
  },

  /**
   * Set to `'none'` or `false` to disable stats printing out after a build.
   * 
   * @default false
  */
  stats: boolean,

  /**
   * Set to `false` to disable the overlay provided by [FriendlyErrorsWebpackPlugin](https://github.com/nuxt/friendly-errors-webpack-plugin).
   * 
   * @default true
  */
  friendlyErrors: boolean,

  /**
   * Additional extensions (beyond `['vue', 'js']` to support in `pages/`, `layouts/`, `middleware/`, etc.)
   * 
  */
  additionalExtensions: Array<any>,

  /**
   * Filters to hide build warnings.
   * 
  */
  warningIgnoreFilters: Array<any>,

  /**
   * Set to true to scan files within symlinks in the build (such as within `pages/`).
   * 
   * @default false
  */
  followSymlinks: boolean,
 },

 cli: {
  /**
   * Add a message to the CLI banner by adding a string to this array.
   * 
  */
  badgeMessages: string[],

  /**
   * Change the color of the 'Nuxt.js' title in the CLI banner.
   * 
   * @default "green"
  */
  bannerColor: string,
 },

 /**
  * Your preferred code editor to launch when debugging.
  * 
  * 
  * @see [documentation](https://github.com/yyx990803/launch-editor#supported-editors)
 */
 editor: string,

 /**
  * The watch property lets you watch custom files for restarting the server.
  * 
  * `chokidar` is used to set up the watchers. To learn more about its pattern options, see chokidar documentation.
  * 
  * 
  * @see [chokidar](https://github.com/paulmillr/chokidar#api)
  * 
  * @example
  * ```js
  * watch: ['~/custom/*.js']
  * ```
 */
 watch: string[],

 /**
  * The style extensions that should be resolved by the Nuxt resolver (for example, in `css` property).
  * 
  * @default [".css",".pcss",".postcss",".styl",".stylus",".scss",".sass",".less"]
 */
 styleExtensions: Array<string>,

 dir: {
  /**
   * The assets directory (aliased as `~assets` in your build).
   * 
   * @default "assets"
  */
  assets: string,

  /**
   * The directory containing app template files like `app.html` and `router.scrollBehavior.js`
   * 
   * @default "app"
  */
  app: string,

  /**
   * Allows customizing the global ID used in the main HTML template as well as the main Vue instance name and other options.
   * 
   * @default "nuxt"
  */
  globalName: string,

  /**
   * Whether to produce a separate modern build targeting browsers that support ES modules.
   * 
   * Set to `'server'` to enable server mode, where the Nuxt server checks browser version based on the user agent and serves the correct bundle.
   * Set to `'client'` to serve both the modern bundle with `<script type="module">` and the legacy bundle with `<script nomodule>`. It will also provide a `<link rel="modulepreload">` for the modern bundle. Every browser that understands the module type will load the modern bundle while older browsers fall back to the legacy (transpiled) bundle.
   * If you have set `modern: true` and are generating your app or have `ssr: false`, modern will be set to `'client'`.
   * If you have set `modern: true` and are serving your app, modern will be set to `'server'`.
   * 
   * 
   * @see [concept of modern mode](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)
  */
  modern: 'server' | 'client' | boolean,

  /**
   * @default "universal"
   * 
   * @deprecated `mode` option is deprecated
   * 
   * @deprecated use `ssr` option
  */
  mode: string,

  /**
   * The `env` property defines environment variables that should be available throughout your app (server- and client-side). They can be assigned using server-side environment variables.
   * 
   * 
   * @note Nuxt uses webpack's `definePlugin` to define these environment variables.
   * This means that the actual `process` or `process.env` from Node.js is neither
   * available nor defined. Each of the `env` properties defined here is individually
   * mapped to `process.env.xxxx` and converted during compilation.
   * 
   * @note Environment variables starting with `NUXT_ENV_` are automatically injected
   * into the process environment.
  */
  env: {
   [key: string]: any
  },

  /**
   * Set the method Nuxt uses to require modules, such as loading `nuxt.config`, server middleware, and so on - defaulting to `jiti` (which has support for TypeScript and ESM syntax).
   * 
   * 
   * @see [jiti](https://github.com/unjs/jiti)
  */
  createRequire: 'jiti' | 'native' | ((p: string | { filename: string }) => NodeRequire),

  /**
   * Whether your Nuxt app should be built to be served by the Nuxt server (`server`) or as static HTML files suitable for a CDN or other static file server (`static`).
   * 
   * This is unrelated to `ssr`.
   * 
   * @default "server"
  */
  target: 'server' | 'static',

  /**
   * Customizes specific global names (they are based on `globalName` by default).
   * 
  */
  globals: {
   id: (globalName: string) => string,

   nuxt: (globalName: string) => string,

   context: (globalName: string) => string,

   pluginPrefix: (globalName: string) => string,

   readyCallback: (globalName: string) => string,

   loadedCallback: (globalName: string) => string,
  },

  /**
   * The folder which will be used to auto-generate your Vuex store structure.
   * 
   * @default "store"
  */
  store: string,
 },

 /**
  * Server middleware are connect/express/h3-shaped functions that handle server-side requests. They run on the server and before the Vue renderer.
  * 
  * By adding entries to `serverMiddleware` you can register additional routes without the need for an external server.
  * You can pass a string, which can be the name of a node dependency or a path to a file. You can also pass an object with `path` and `handler` keys (`handler` can be a path or a function).
  * 
  * 
  * @note If you pass a function directly, it will only run in development mode.
  * 
  * @example
  * ```js
  * serverMiddleware: [
  *   // Will register redirect-ssl npm package
  *   'redirect-ssl',
  *   // Will register file from project server-middleware directory to handle /server-middleware/* requires
  *   { path: '/server-middleware', handler: '~/server-middleware/index.js' },
  *   // We can create custom instances too, but only in development mode, they are ignored for the production bundle.
  *   { path: '/static2', handler: serveStatic(fileURLToPath(new URL('./static2', import.meta.url))) }
  * ]
  * ```
  * 
  * @note If you don't want middleware to run on all routes you should use the object
  * form with a specific path.
  * 
  * If you pass a string handler, Nuxt will expect that file to export a default function
  * that handles `(req, res, next) => void`.
  * 
  * @example
  * ```js
  * export default function (req, res, next) {
  *   // req is the Node.js http request object
  *   console.log(req.url)
  *   // res is the Node.js http response object
  *   // next is a function to call to invoke the next middleware
  *   // Don't forget to call next at the end if your middleware is not an endpoint!
  *   next()
  * }
  * ```
  * 
  * Alternatively, it can export a connect/express/h3-type app instance.
  * 
  * @example
  * ```js
  * import bodyParser from 'body-parser'
  * import createApp from 'express'
  * const app = createApp()
  * app.use(bodyParser.json())
  * app.all('/getJSON', (req, res) => {
  *   res.json({ data: 'data' })
  * })
  * export default app
  * ```
  * 
  * Alternatively, instead of passing an array of `serverMiddleware`, you can pass an object
  * whose keys are the paths and whose values are the handlers (string or function).
  * 
  * @example
  * ```js
  * export default {
  *   serverMiddleware: {
  *     '/a': '~/server-middleware/a.js',
  *     '/b': '~/server-middleware/b.js',
  *     '/c': '~/server-middleware/c.js'
  *   }
  * }
  * ```
 */
 serverMiddleware: Array<any>,

 generate: {
  /**
   * Directory name that holds all the assets and generated pages for a `static` build.
   * 
   * @default "/home/runner/work/bridge/bridge/packages/bridge-schema/dist"
  */
  dir: string,

  /**
   * The number of routes that are generated concurrently in the same thread.
   * 
   * @default 500
  */
  concurrency: number,

  /**
   * Interval in milliseconds between two render cycles to avoid flooding a potential API with calls.
   * 
   * @default 0
  */
  interval: number,

  /**
   * Set to `false` to disable creating a directory + `index.html` for each route.
   * 
   * @default true
   * 
   * @example
   * ```bash
   * # subFolders: true
   * -| dist/
   * ---| index.html
   * ---| about/
   * -----| index.html
   * ---| products/
   * -----| item/
   * -------| index.html
   * 
   * # subFolders: false
   * -| dist/
   * ---| index.html
   * ---| about.html
   * ---| products/
   * -----| item.html
   * ```
  */
  subFolders: boolean,

  /**
   * The path to the fallback HTML file.
   * 
   * Set this as the error page in your static server configuration, so that unknown routes can be rendered (on the client-side) by Nuxt.
   * If unset or set to a falsy value, the name of the fallback HTML file will be `200.html`. If set to `true`, the filename will be `404.html`. If you provide a string as a value, it will be used instead.
   * 
   * @default "200.html"
   * 
   * @note Multiple services (e.g. Netlify) detect a `404.html` automatically. If
   * you configure your web server on your own, please consult its documentation
   * to find out how to set up an error page (and set it to the `404.html` file).
  */
  fallback: string,

  /**
   * Set to `false` to disable generating pages discovered through crawling relative links in generated pages.
   * 
   * @default true
  */
  crawler: boolean,

  /**
   * Set to `false` to disable generating a `manifest.js` with a list of all generated pages.
   * 
   * @default true
  */
  manifest: boolean,

  /**
   * Set to `false` to disable generating a `.nojekyll` file (which aids compatibility with GitHub Pages).
   * 
   * @default true
  */
  nojekyll: boolean,

  /**
   * Configure the cache (used with `static` target to avoid rebuilding when no files have changed).
   * 
   * Set to `false` to disable completely.
   * 
  */
  cache: {
   /**
    * An array of files or directories to ignore. (It can also be a function that returns an array.)
    * 
   */
   ignore: Array<any>,

   /**
    * Options to pass to [`globby`](https://github.com/sindresorhus/globby), which is used to generate a 'snapshot' of the source files.
    * 
   */
   globbyOptions: {
    /** @default true */
    gitignore: boolean,
   },
  },

  staticAssets: {
   /**
    * The directory underneath `/_nuxt/`, where static assets (payload, state and manifest files) will live.
    * 
    * @default "static"
   */
   dir: string,

   /**
    * The full path to the directory underneath `/_nuxt/` where static assets (payload, state and manifest files) will live.
    * 
    * @default "/_nuxt/home/runner/work/bridge/bridge/packages/bridge-schema/dist"
   */
   base: string,

   /**
    * The full path to the versioned directory where static assets for the current build are located.
    * 
    * @default ""
   */
   versionBase: string,

   /**
    * A unique string to uniquely identify payload versions (defaults to the current timestamp).
    * 
    * @default "1692047426"
   */
   version: string,
  },
 },

 messages: {
  /**
   * The text that displays on the Nuxt loading indicator when `ssr: false`.
   * 
   * @default "Loading..."
  */
  loading: string,

  /**
   * The 404 text on the default Nuxt error page.
   * 
   * @default "This page could not be found"
  */
  error_404: string,

  /**
   * The text to display on the default Nuxt error page when there has been a server error.
   * 
   * @default "Server error"
  */
  server_error: string,

  /**
   * The text (linked to nuxtjs.org) that appears on the built-in Nuxt error page.
   * 
   * @default "Nuxt"
  */
  nuxtjs: string,

  /**
   * The text (linked to the home page) that appears on the built-in Nuxt error page.
   * 
   * @default "Back to the home page"
  */
  back_to_home: string,

  /**
   * The message that will display on a white screen if the built-in Nuxt error page can't be rendered.
   * 
   * @default "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details."
  */
  server_error_details: string,

  /**
   * The default error title (if there isn't a specific error message) on the built-in Nuxt error page.
   * 
   * @default "Error"
  */
  client_error: string,

  /**
   * The error message (in debug mode) on the built-in Nuxt error page.
   * 
   * @default "An error occurred while rendering the page. Check developer tools console for details."
  */
  client_error_details: string,
 },

 render: {
  /**
   * Use this option to customize the Vue SSR bundle renderer. This option is skipped if `ssr: false`.
   * 
   * Read [docs for Vue 2](https://ssr.vuejs.org/api/#renderer-options) here.
   * 
  */
  bundleRenderer: {
   shouldPrefetch: () => any,

   shouldPreload: () => any,

   /**
    * enabled by default for development
    * 
   */
   runInNewContext: any,
  },

  /**
   * Configure the crossorigin attribute on `<link rel="stylesheet">` and `<script>` tags in generated HTML. [More information](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin).
   * 
  */
  crossorigin: any,

  /**
   * Adds prefetch and preload links for faster initial page load time. You probably don't want to disable this option unless you have many pages and routes.
   * 
   * @default true
  */
  resourceHints: boolean,

  /**
   * Whether to enable rendering of HTML - either dynamically (in server mode) or at generate time.
   * 
   * This option is automatically set based on global SSR value if not provided. This can be useful to dynamically enable/disable SSR at runtime after image builds (with docker, for example).
   * 
  */
  ssr: any,

  /**
   * Forward server-side logs to the browser for better debugging (only available in development).
   * 
   * Set to `collapsed` to collapse the logs, or `false` to disable.
   * 
   * @default false
  */
  ssrLog: boolean,

  /**
   * Configuration for HTTP2 push headers.
   * 
  */
  http2: {
   /**
    * Set to true to enable HTTP2 push headers.
    * 
    * @default false
   */
   push: boolean,

   /**
    * 
    * @deprecated
   */
   shouldPush: any,

   /**
    * You can control what links to push using this function. It receives `req`, `res`, `publicPath` and a `preloadFiles` array.
    * 
    * You can add your own assets to the array as well. Using `req` and `res` you can decide what links to push based on the request headers, for example using the cookie with application version.
    * Assets will be joined together with `,` and passed as a single `Link` header.
    * 
    * 
    * @example
    * ```js
    * pushAssets: (req, res, publicPath, preloadFiles) =>
    *   preloadFiles
    *     .filter(f => f.asType === 'script' && f.file === 'runtime.js')
    *     .map(f => `<${publicPath}${f.file}>; rel=preload; as=${f.asType}`)
    * ```
   */
   pushAssets: any,
  },

  /**
   * Configure the behavior of the `static/` directory.
   * 
   * See [serve-static docs](https://github.com/expressjs/serve-static) for possible options.
   * 
  */
  static: {
   /**
    * Whether to add the router base to your static assets.
    * 
    * @default true
    * 
    * @note some URL rewrites might not respect the prefix.
    * 
    * @example
    * Assets: favicon.ico
    * Router base: /t
    * With `prefix: true` (default): /t/favicon.ico
    * With `prefix: false`: /favicon.ico
   */
   prefix: boolean,
  },

  /**
   * Configure server compression.
   * 
   * Set to `false` to disable compression. You can also pass an object of options for [compression middleware](https://www.npmjs.com/package/compression), or use your own middleware by passing it in directly - for example, `otherComp({ myOptions: 'example' })`.
   * 
  */
  compressor: boolean | object | Function,

  /**
   * To disable etag for pages set `etag: false`. See [etag docs](https://github.com/jshttp/etag) for possible options. You can use your own hash function by specifying etag.hash:
   * 
   * 
   * @example
   * ```js
   * import { murmurHash128 } from 'murmurhash-native'
   * 
   * export default {
   *   render: {
   *     etag: {
   *       hash: html => murmurHash128(html)
   *     }
   *   }
   * }
   * ```
   * In this example we are using `murmurhash-native`, which is faster
   * for larger HTML body sizes. Note that the weak option is ignored
   * when specifying your own hash function.
  */
  etag: {
   /** @default false */
   hash: boolean,

   /** @default false */
   weak: boolean,
  },

  /**
   * Use this to configure Content-Security-Policy to load external resources. [Read more](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).
   * 
   * Set to `true` to enable, or you can pass options to fine-tune your CSP options.
   * **Prerequisites**: These CSP settings are only effective when using Nuxt with `mode: 'server'` to serve your SSR application.
   * **Updating settings**: These settings are read by the Nuxt server directly from `nuxt.config`. This means changes to these settings take effect when the server is restarted. There is no need to rebuild the application to update CSP settings.
   * 
   * @default false
   * 
   * @example
   * ```js
   * export default {
   *   render: {
   *     csp: {
   *       hashAlgorithm: 'sha256',
   *       policies: {
   *         'script-src': [
   *           'https://www.google-analytics.com',
   *           'https://name.example.com'
   *         ],
   *         'report-uri': ['https://report.example.com/report-csp-violations']
   *       },
   *       addMeta: true
   *     }
   *   }
   * }
   * ```
   * 
   * The following example allows Google Analytics, LogRocket.io, and Sentry.io
   * for logging and analytic tracking.
   * 
   * Review [this blog on Sentry.io](https://blog.sentry.io/2018/09/04/how-sentry-captures-csp-violations)
   * to learn what tracking link you should use.
   * 
   * @example
   * ```js
   * // PRIMARY_HOSTS = `loc.example-website.com`
   * export default {
   *   render: {
   *     csp: {
   *       reportOnly: true,
   *       hashAlgorithm: 'sha256',
   *       policies: {
   *         'default-src': ["'self'"],
   *         'img-src': ['https:', '*.google-analytics.com'],
   *         'worker-src': ["'self'", `blob:`, PRIMARY_HOSTS, '*.logrocket.io'],
   *         'style-src': ["'self'", "'unsafe-inline'", PRIMARY_HOSTS],
   *         'script-src': [
   *           "'self'",
   *           "'unsafe-inline'",
   *           PRIMARY_HOSTS,
   *           'sentry.io',
   *           '*.sentry-cdn.com',
   *           '*.google-analytics.com',
   *           '*.logrocket.io'
   *         ],
   *         'connect-src': [PRIMARY_HOSTS, 'sentry.io', '*.google-analytics.com'],
   *         'form-action': ["'self'"],
   *         'frame-ancestors': ["'none'"],
   *         'object-src': ["'none'"],
   *         'base-uri': [PRIMARY_HOSTS],
   *         'report-uri': [
   *           `https://sentry.io/api/<project>/security/?sentry_key=<key>`
   *         ]
   *       }
   *     }
   *   }
   * }
   * ```
  */
  csp: boolean,

  /**
   * Options used for serving distribution files. Only applicable in production.
   * 
   * See [serve-static docs](https://www.npmjs.com/package/serve-static) for possible options.
   * 
  */
  dist: {
   /** @default false */
   index: boolean,

   /** @default "1y" */
   maxAge: string,
  },

  /**
   * Configure fallback behavior for [`serve-placeholder` middleware](https://github.com/nuxt/serve-placeholder).
   * 
   * Example of allowing `.js` extension for routing (for example, `/repos/nuxt.js`):
   * 
   * 
   * @example
   * ```js
   * export default {
   *   render: {
   *     fallback: {
   *       static: {
   *         // Avoid sending 404 for these extensions
   *         handlers: {
   *           '.js': false
   *         }
   *       }
   *     }
   *   }
   * }
   * ```
  */
  fallback: {
   /**
    * For routes matching the publicPath (`/_nuxt/*`). Disable by setting to `false`.
    * 
   */
   dist: any,

   /**
    * For all other routes (`/*`). Disable by setting to `false`.
    * 
   */
   static: {
    /** @default true */
    skipUnknown: boolean,

    handlers: {
     /** @default false */
     ".htm": boolean,

     /** @default false */
     ".html": boolean,
    },
   },
  },
 },

 router: {
  /**
   * Configure the router mode.
   * 
   * For server-side rendering it is not recommended to change it.
   * 
   * @default "history"
  */
  mode: string,

  /**
   * The base URL of the app. For example, if the entire single page application is served under `/app/`, then base should use the value `'/app/'`.
   * 
   * This can be useful if you need to serve Nuxt as a different context root, from within a bigger web site.
   * 
   * @default "/"
  */
  base: string,

  /**
   * @default true
   * 
   * @private
  */
  _routerBaseSpecified: boolean,

  routes: Array<any>,

  /**
   * This allows changing the separator between route names that Nuxt uses.
   * 
   * Imagine we have the page file `pages/posts/_id.vue`. Nuxt will generate the route name programmatically, in this case `posts-id`. If you change the routeNameSplitter config to `/` the name will change to `posts/id`.
   * 
   * @default "-"
  */
  routeNameSplitter: string,

  /**
   * Set the default(s) middleware for every page of the application.
   * 
  */
  middleware: Array<any>,

  /**
   * Globally configure `<nuxt-link>` default active class.
   * 
   * @default "nuxt-link-active"
  */
  linkActiveClass: string,

  /**
   * Globally configure `<nuxt-link>` default exact active class.
   * 
   * @default "nuxt-link-exact-active"
  */
  linkExactActiveClass: string,

  /**
   * Globally configure `<nuxt-link>` default prefetch class (feature disabled by default).
   * 
   * @default false
  */
  linkPrefetchedClass: boolean,

  /**
   * You can pass a function to extend the routes created by Nuxt.
   * 
   * 
   * @example
   * ```js
   * import { fileURLToPath } from 'url'
   * export default {
   *   router: {
   *     extendRoutes(routes, resolve) {
   *       routes.push({
   *         name: 'custom',
   *         path: '*',
   *         component: fileURLToPath(new URL('./pages/404.vue', import.meta.url))
   *       })
   *     }
   *   }
   * }
   * ```
  */
  extendRoutes: any,

  /**
   * The `scrollBehavior` option lets you define a custom behavior for the scroll position between the routes. This method is called every time a page is rendered. To learn more about it, see the `vue-router` documentation.
   * 
   * 
   * @deprecated router.scrollBehavior` property is deprecated in favor of using `~/app/router.scrollBehavior.js` file, learn more: https://nuxtjs.org/api/configuration-router#scrollbehavior
   * 
   * @see [vue-router `scrollBehavior` documentation](https://router.vuejs.org/guide/advanced/scroll-behavior.html).
  */
  scrollBehavior: any,

  /**
   * Provide custom query string parse function. Overrides the default.
   * 
   * @default false
  */
  parseQuery: boolean,

  /**
   * Provide custom query string stringify function. Overrides the default.
   * 
   * @default false
  */
  stringifyQuery: boolean,

  /**
   * Controls whether the router should fall back to hash mode when the browser does not support history.pushState, but mode is set to history.
   * 
   * Setting this to `false` essentially makes every router-link navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.
   * 
   * @default false
  */
  fallback: boolean,

  /**
   * Configure `<nuxt-link>` to prefetch the code-splitted page when detected within the viewport. Requires [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) to be supported (see [Caniuse](https://caniuse.com/intersectionobserver)).
   * 
   * @default true
  */
  prefetchLinks: boolean,

  /**
   * When using `nuxt generate` with target: 'static', Nuxt will generate a payload.js for each page.
   * 
   * With this option enabled, Nuxt will automatically prefetch the payload of the linked page when the `<nuxt-link>` is visible in the viewport, making instant navigation.
   * 
   * @default true
  */
  prefetchPayloads: boolean,

  /**
   * If this option is set to `true`, trailing slashes will be appended to every route. If set to `false`, they'll be removed.
   * 
   * 
   * @warning This option should not be set without preparation and has to
   * be tested thoroughly. When setting `trailingSlash` to something else than
   * `undefined`, the opposite route will stop working. Thus, 301 redirects should
   * be in place and your internal linking has to be adapted correctly. If you set
   * `trailingSlash` to `true`, then only `example.com/abc/` will work, but not
   * `example.com/abc`. On `false`, it's vice-versa.
  */
  trailingSlash: any,
 },

 server: {
  /**
   * Whether to enable HTTPS.
   * 
   * @default false
   * 
   * @example
   * ```
   * import { fileURLToPath } from 'node:url'
   * export default {
   *   server: {
   *     https: {
   *       key: fs.readFileSync(fileURLToPath(new URL('./server.key', import.meta.url))),
   *       cert: fs.readFileSync(fileURLToPath(new URL('./server.crt', import.meta.url)))
   *     }
   *   }
   * }
   * ```
  */
  https: false | { key: string; cert: string },

  /** @default 3000 */
  port: number,

  /** @default "localhost" */
  host: string,

  socket: any,

  /**
   * Enabling timing adds a middleware to measure the time elapsed during server-side rendering and adds it to the headers as 'Server-Timing'.
   * 
   * Apart from true/false, this can be an object for providing options. Currently, only `total` is supported (which directly tracks the whole time spent on server-side rendering.
   * 
  */
  timing: () => any,
 },
}

type DeepPartial<T> = T extends Function ? T : T extends Record<string, any> ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
/** User configuration in `nuxt.config` file */
interface Nuxt2Config extends DeepPartial<Omit<ConfigSchema, 'vite'>> {
}
/** Normalized Nuxt options available as `nuxt.options.*` */
interface Nuxt2Options extends ConfigSchema {
}

interface VueAppCompat {
    component: VueConstructor['component'];
    config: {
        globalProperties: any;
        [key: string]: any;
        errorHandler: VueConstructor['config']['errorHandler'];
    };
    directive: VueConstructor['directive'];
    mixin: VueConstructor['mixin'];
    mount: () => void;
    provide: (name: string, value: any) => void;
    unmount: () => void;
    use: VueConstructor['use'];
    version: string;
}
interface RuntimeNuxtHooks {
    'app:error': (err: any) => void | Promise<void>;
    'app:error:cleared': (options: {
        redirect?: string;
    }) => void | Promise<void>;
    'app:mounted': (app: VueAppCompat) => void | Promise<void>;
    'meta:register': (metaRenderers: any[]) => void | Promise<void>;
    'vue:setup': () => void;
}
interface NuxtAppCompat {
    nuxt2Context: Nuxt2Context;
    vue2App: ComponentOptions<Vue>;
    vueApp: VueAppCompat;
    globalName: string;
    hooks: Hookable<RuntimeNuxtHooks>;
    hook: NuxtAppCompat['hooks']['hook'];
    callHook: NuxtAppCompat['hooks']['callHook'];
    [key: string]: any;
    ssrContext?: Record<string, any>;
    payload: {
        [key: string]: any;
    };
    provide: (name: string, value: any) => void;
}
interface IncomingMessage extends IncomingMessage$1 {
    originalUrl?: IncomingMessage$1['url'] | undefined;
}
interface NuxtRuntimeConfig {
    [key: string]: any;
    /**
     * This is used internally by Nuxt for dynamic configuration and should not be used.
     * @internal
     */
    _app?: never;
}
interface NuxtAppOptions extends ComponentOptions<Vue> {
    nuxt: {
        dateErr: number | null;
        err: any;
        error: any;
        defaultTransition?: any;
        transitions?: any[];
        setTransitions?: (transitions: any | any[]) => void;
    };
    head?: any;
    router: vue_router.default;
    context: Nuxt2Context;
    $_nuxtApp: NuxtAppCompat;
}
type NuxtState = Record<string, any>;
interface NuxtError {
    message?: string;
    path?: string;
    statusCode?: number;
}
interface Nuxt2Context {
    $config: NuxtRuntimeConfig;
    app: NuxtAppOptions;
    base: string;
    isDev: boolean;
    isHMR: boolean;
    route: Route;
    from: Route;
    store: any;
    env: Record<string, any>;
    params: Route['params'];
    payload: any;
    query: Route['query'];
    next?: (err?: any) => void;
    req: IncomingMessage;
    res: ServerResponse;
    redirect(status: number, path: string, query?: Route['query']): void;
    redirect(path: string, query?: Route['query']): void;
    redirect(location: Location): void;
    redirect(status: number, location: Location): void;
    ssrContext?: {
        req: Nuxt2Context['req'];
        res: Nuxt2Context['res'];
        url: string;
        target: 'server' | 'static';
        spa?: boolean;
        modern: boolean;
        runtimeConfig: {
            public: NuxtRuntimeConfig;
            private: NuxtRuntimeConfig;
        };
        redirected: boolean;
        next: (err?: any) => void;
        beforeRenderFns: Array<() => any>;
        beforeSerializeFns: Array<() => any>;
        fetchCounters: Record<string, number>;
        nuxt: {
            layout: string;
            data: Array<Record<string, any>>;
            fetch: Array<Record<string, any>>;
            error: any;
            state: Array<Record<string, any>>;
            serverRendered: boolean;
            routePath: string;
            config: NuxtRuntimeConfig;
        };
    };
    error(params: NuxtError): NuxtError;
    nuxtState: NuxtState;
}

declare const _default: {
    [x: string]: untyped_dist_types_a20127ea.a | untyped_dist_types_a20127ea.J | untyped_dist_types_a20127ea.I;
};

export { IncomingMessage, Nuxt2Config, Nuxt2Context, Nuxt2Options, NuxtAppCompat, NuxtAppOptions, _default as NuxtConfigSchema, NuxtError, NuxtRuntimeConfig, RuntimeNuxtHooks, VueAppCompat };
