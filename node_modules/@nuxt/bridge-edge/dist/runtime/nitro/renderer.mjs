import { createRenderer } from "vue-bundle-renderer/runtime";
import { getQuery } from "h3";
import devalue from "@nuxt/devalue";
import { useRuntimeConfig, defineRenderHandler, getRouteRules } from "#internal/nitro";
import { useNitroApp } from "#internal/nitro/app";
import { buildAssetsURL } from "#paths";
import htmlTemplate from "#build/views/document.template.mjs";
import { renderToString } from "#vue-renderer";
const STATIC_ASSETS_BASE = process.env.NUXT_STATIC_BASE + "/" + process.env.NUXT_STATIC_VERSION;
const PAYLOAD_JS = "/payload.js";
const getClientManifest = () => import("#build/dist/server/client.manifest.mjs").then((r) => r.default || r).then((r) => typeof r === "function" ? r() : r);
const getServerEntry = () => import("#build/dist/server/server.mjs").then((r) => r.default || r);
const getSSRRenderer = lazyCachedFunction(async () => {
  const manifest = await getClientManifest();
  if (!manifest) {
    throw new Error("client.manifest is not available");
  }
  const createSSRApp = await getServerEntry();
  if (!createSSRApp) {
    throw new Error("Server bundle is not available");
  }
  return createRenderer(createSSRApp, {
    manifest,
    renderToString,
    buildAssetsURL
  });
});
const getSPARenderer = lazyCachedFunction(async () => {
  const manifest = await getClientManifest();
  const options = {
    manifest,
    renderToString: () => '<div id="__nuxt"></div>',
    buildAssetsURL
  };
  const renderer = createRenderer(() => () => {
  }, options);
  const result = await renderer.renderToString({});
  const renderToString2 = (ssrContext) => {
    const config = useRuntimeConfig();
    ssrContext.nuxt = {
      serverRendered: false,
      config: {
        public: config.public,
        app: config.app
      }
    };
    ssrContext.renderMeta = ssrContext.renderMeta ?? (() => Promise.resolve({}));
    return Promise.resolve(result);
  };
  return { renderToString: renderToString2 };
});
export default defineRenderHandler(async (event) => {
  const ssrError = event.node.req.url?.startsWith("/__nuxt_error") ? getQuery(event) : null;
  let url = ssrError?.url || event.node.req.url;
  let isPayloadReq = false;
  if (url.startsWith(STATIC_ASSETS_BASE) && url.endsWith(PAYLOAD_JS)) {
    isPayloadReq = true;
    url = url.slice(STATIC_ASSETS_BASE.length, url.length - PAYLOAD_JS.length) || "/";
  }
  const routeOptions = getRouteRules(event);
  const config = useRuntimeConfig();
  const ssrContext = {
    url,
    event,
    req: event.node.req,
    res: event.node.res,
    runtimeConfig: { private: config, public: { public: config.public, app: config.app } },
    noSSR: !!event.node.req.headers["x-nuxt-no-ssr"] || routeOptions.ssr === false,
    error: ssrError,
    redirected: void 0,
    nuxt: void 0,
    /* Nuxt 2 payload */
    payload: void 0
  };
  const renderer = process.env.NUXT_NO_SSR || ssrContext.noSSR ? await getSPARenderer() : await getSSRRenderer();
  const _rendered = await renderer.renderToString(ssrContext).catch((err) => {
    if (!ssrError) {
      throw ssrContext.error || err;
    }
  });
  if (!_rendered) {
    return;
  }
  if (ssrContext.redirected || event.node.res.writableEnded) {
    return;
  }
  if (ssrContext.nuxt?.error && !ssrError) {
    throw ssrContext.nuxt.error;
  }
  ssrContext.nuxt = ssrContext.nuxt || {};
  if (process.env.NUXT_FULL_STATIC) {
    ssrContext.nuxt.staticAssetsBase = STATIC_ASSETS_BASE;
  }
  if (isPayloadReq) {
    const response = {
      body: renderPayload(ssrContext.nuxt, url),
      statusCode: ssrContext.event.node.res.statusCode,
      statusMessage: ssrContext.event.node.res.statusMessage,
      headers: {
        "content-type": "text/javascript;charset=UTF-8",
        "x-powered-by": "Nuxt"
      }
    };
    return response;
  } else {
    const state = `<script>window.__NUXT__=${devalue(ssrContext.nuxt)}<\/script>`;
    _rendered.meta = _rendered.meta || {};
    if (ssrContext.renderMeta) {
      Object.assign(_rendered.meta, await ssrContext.renderMeta());
    }
    const htmlContext = {
      htmlAttrs: normalizeChunks([_rendered.meta.htmlAttrs]),
      headAttrs: normalizeChunks([_rendered.meta.headAttrs]),
      head: normalizeChunks([
        _rendered.meta.headTags,
        _rendered.renderResourceHints(),
        _rendered.renderStyles(),
        ssrContext.styles
      ]),
      bodyAttrs: normalizeChunks([_rendered.meta.bodyAttrs]),
      bodyPrepend: normalizeChunks([
        ssrContext.teleports?.body,
        _rendered.meta.bodyScriptsPrepend
      ]),
      body: [
        // TODO: Rename to _rendered.body in next vue-bundle-renderer
        _rendered.html
      ],
      bodyAppend: normalizeChunks([
        state,
        _rendered.renderScripts(),
        _rendered.meta.bodyScripts
      ])
    };
    const nitroApp = useNitroApp();
    await nitroApp.hooks.callHook("render:html", htmlContext, { event });
    const response = {
      body: htmlTemplate({
        HTML_ATTRS: joinAttrs(htmlContext.htmlAttrs),
        HEAD_ATTRS: joinAttrs(htmlContext.headAttrs),
        HEAD: joinTags(htmlContext.head),
        BODY_ATTRS: joinAttrs(htmlContext.bodyAttrs),
        APP: joinTags(htmlContext.bodyPrepend) + _rendered.html + joinTags(htmlContext.bodyAppend)
      }),
      statusCode: event.node.res.statusCode,
      statusMessage: event.node.res.statusMessage,
      headers: {
        "content-type": "text/html;charset=UTF-8",
        "x-powered-by": "Nuxt"
      }
    };
    return response;
  }
});
function renderPayload(payload, url) {
  return `__NUXT_JSONP__("${url}", ${devalue(payload)})`;
}
function lazyCachedFunction(fn) {
  let res = null;
  return () => {
    if (res === null) {
      res = fn().catch((err) => {
        res = null;
        throw err;
      });
    }
    return res;
  };
}
function normalizeChunks(chunks) {
  return chunks.filter(Boolean).map((i) => i.trim());
}
function joinTags(tags) {
  return tags.join("");
}
function joinAttrs(chunks) {
  return chunks.join(" ");
}
