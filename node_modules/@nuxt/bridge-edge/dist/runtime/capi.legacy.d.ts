import { ComputedRef, ref } from 'vue';
import type { Route } from 'vue-router';
import type { Nuxt2Context } from '@nuxt/bridge-schema';
export { computed, customRef, del, effectScope, getCurrentInstance, getCurrentScope, h, inject, isReactive, isReadonly, isRef, markRaw, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, provide, reactive, readonly, set, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, useAttrs, useCssModule, useCssModule as useCSSModule, useSlots, version, watch, watchEffect, watchPostEffect, watchSyncEffect } from 'vue';
export { ref };
export declare const createApp: () => () => never;
export declare const createRef: () => () => never;
export declare const defineAsyncComponent: () => () => never;
export declare const isRaw: () => () => never;
export declare const proxyRefs: () => () => never;
export declare const warn: () => () => never;
export declare const defineNuxtMiddleware: () => never;
export declare const defineNuxtPlugin: () => never;
export declare const setMetaPlugin: () => never;
export declare const setSSRContext: () => never;
export declare const globalPlugin: () => never;
export declare const withContext: () => never;
export declare const useStatic: () => never;
export declare const reqRef: () => never;
export declare const reqSsrRef: () => never;
export declare const ssrRef: (value: any, key: any) => import("vue").Ref<unknown>;
export declare const shallowSsrRef: (value: any, key: any) => import("vue").Ref<unknown>;
export declare const ssrPromise: (value: any, key: any) => Promise<any>;
export declare const onGlobalSetup: (fn: any) => void;
export declare const useAsync: (cb: any, key: any) => import("vue").Ref<unknown>;
interface UseContextReturn extends Omit<Nuxt2Context, 'from' | 'route' | 'query' | 'params'> {
    route: ComputedRef<Route>;
    query: ComputedRef<Route['query']>;
    from: ComputedRef<Route>;
    params: ComputedRef<Route['params']>;
}
export declare const useContext: () => UseContextReturn;
export declare const defineComponent: (options: any) => any;
export declare const useMeta: (init: any) => any;
export declare const wrapProperty: (property: any, makeComputed?: boolean) => () => any;
export declare const useRouter: () => import("vue-router").default;
export declare const useRoute: () => Route;
export declare const useStore: () => any;
export declare const useFetch: (callback: any) => {
    fetch: any;
    fetchState: any;
};
